" .ideavimrc is a configuration file for IdeaVim plugin. It uses
"   the same commands as the original .vimrc configuration.
" You can find a list of commands here: https://jb.gg/h38q75
" Find more examples here: https://jb.gg/share-ideavimrc

""" Editing and Reloading the Config
set clipboard+=unnamed
set clipboard+=ideaput
nnoremap \e :e ~/.ideavimrc<CR>
nnoremap \r :action IdeaVim.ReloadVimRc.reload<CR>

""" Search
set ignorecase
set smartcase
set incsearch " Highlight search results when typing
set hlsearch " Highlight search results

" <leader>
let mapleader = "\<Space>" " I ended up sticking to Space as the leader and not ;
let maplocalleader = "\\" " 20250218140105 trying '\' as a localleader for a while

"""" Distraction Free Mode
nnoremap <c-z> :action ToggleDistractionFreeMode<CR>

""" Terminal
nnoremap <c-t> :action ActivateTerminalToolWindow<CR>
nnoremap <leader>t :action Terminal.OpenInTerminal<CR>

""" Nerdtree
set nerdtree

set surround "similar to tpope/surround
set multiple-cursors
set history=1000
set visualbell
set noerrorbells
set scrolloff=3 " Display at least 3 lines around you cursor

" line numbering setup
set number
set relativenumber


nmap <leader><leader>s :action KJumpAction<cr>
nmap <leader><leader>w :action KJumpAction.Word0<cr>
nmap <leader><leader>l :action KJumpAction.Line<cr>

" # Sneak plugin: makes two character sS movements work
set sneak
" # Quickscope plugin: Allows for easy forward/backward navigation on a line
" by highligthing unique characters in each word when using f/F/t/T
" If you are using ideavim-sneak please ensure set quickscope is placed after set sneak.
set quickscope

set multicursor

map q <Plug>(multicursor-ms/)
map z <Plug>(multicursor-mcv)
map Z <Plug>(multicursor-mcr)

" # Easymotion plugin
set easymotion
set notimeout





source ~/.intellimacs/spacemacs.vim

" (Optional) Enable other Intellimacs modules
source ~/.intellimacs/extra.vim
source ~/.intellimacs/major.vim
source ~/.intellimacs/hybrid.vim

" (Optional) Enable which-key plugin
source ~/.intellimacs/which-key.vim

" (Optional) My own vim commands
nnoremap Y y$

" (Optional) Comma for major mode
nmap , <leader>m
vmap , <leader>m

" (Optional) Add/edit actions
nnoremap <leader>gl    :action Vcs.Show.Log<CR>
vnoremap <leader>gl    :action Vcs.Show.Log<CR>

let g:WhichKeyDesc_display = "<leader>d Display options"

let g:WhichKeyDesc_zen_mode = "<leader>dz Toggle Zen mode"
let g:WhichKeyDesc_df_mode = "<leader>dd Toggle Distraction-Free mode"
let g:WhichKeyDesc_fullscreen = "<leader>df Toggle full screen"

" allows you to press jk or kj to exit from insert mode
inoremap jk <Esc>
inoremap kj <Esc>
inoremap <C-L> <Esc>

" Scala specific key mappings
inoremap M< =>
inoremap ,m <-
inoremap m, ->

" Pasting from yank history
nnoremap <leader>y :action PasteMultiple<CR>

" Comment
nnoremap <leader>cc :action CommentByLineComment<CR>
vmap <leader>cc :action CommentByLineComment<CR>
vmap <leader>cb :action CommentByBlockComment<CR>

" Menus
nnoremap <leader>m :action ActivateProjectToolWindow<CR>

" Refactorings
nnoremap <leader>oi :action OptimizeImports<CR>
nnoremap <leader>rn :action RenameElement<CR>
nnoremap <leader>rf :action RenameFile<CR>
nnoremap <leader>ri :action Inline<CR>
nnoremap <leader>rv :action IntroduceVariable<CR>
nnoremap <leader>rm :action ExtractMethod<CR>
nnoremap <leader>rr :action Refactorings.QuickListPopupAction<CR>

vmap <leader>rp :action IntroduceParameter<CR>
vmap <leader>rn :action RenameElement<CR>
vmap <leader>rf :action RenameFile<CR>
vmap <leader>ri :action Inline<CR>
vmap <leader>rv :action IntroduceVariable<CR>
vmap <leader>rm :action ExtractMethod<CR>
vmap <leader>rr :action Refactorings.QuickListPopupAction<CR>
vmap <leader>rr :action Refactorings.QuickListPopupAction<CR>
nnoremap <leader>rp :action IntroduceParameter<CR>
nnoremap <leader>im :action ImplementMethods<CR>
nnoremap <leader>om :action OverrideMethods<CR>

" quickfix action, which opens the suggestion window from IntelliJ:
nnoremap <leader>qf :action ShowIntentionActions<CR>

" formatting code:
nnoremap <leader>F :action ReformatCode<CR>

" GoTo
nnoremap gx :action OpenInBrowser<CR>
nnoremap gd :action GotoDeclaration<CR>
nnoremap gr :action FindUsages<CR>
nnoremap <leader>gi :action GotoImplementation<CR>
nnoremap <leader>gs :action ActivateStructureToolWindow<CR>
nnoremap <leader>sp :action ParameterInfo<CR>
nnoremap <leader>si :action Scala.ShowImplicitArguments<CR>
nnoremap <leader>sd :action QuickImplementations<CR>

" Types
nnoremap K :action Scala.TypeInfo<CR>
vmap K :action Scala.TypeInfo<CR>

" Search
nnoremap <leader>fs :action GotoSymbol<CR>
nnoremap <leader>ff :action GotoFile<CR>
nnoremap <leader>fc :action GotoClass<CR>
nnoremap <leader>fa :action GotoAction<CR>
nnoremap <leader>fg :action FindInPath<CR>
nnoremap <leader>fr :action ReplaceInPath<CR>

" Test and Run
nnoremap <leader>gt :action GotoTest<CR>
nnoremap <leader>tn :action RunClass<CR>
nnoremap <leader>tl :action Rerun<CR>
nnoremap <leader>tf :action RerunFailedTests<CR>

" Undo
nnoremap <leader>uh :action LocalHistory.ShowHistory<CR>

" Jumping
" built-in navigation to navigated items works better
nnoremap <c-o> :action Back<cr>
nnoremap <c-i> :action Forward<cr>

" Navigation
nnoremap ]c :action GotoNextError<cr>
nnoremap [c :action GotoPreviousError<cr>
nnoremap ]h :action VcsShowNextChangeMarker<cr>
nnoremap [h :action VcsShowPrevChangeMarker<cr>

" Debugging
" Map <leader>d to start debug
map <leader>d <Action>(Debug)

" Map \b to toggle the breakpoint on the current line
map <leader>b <Action>(ToggleLineBreakpoint)

" Misc
nnoremap <leader>vr :source ~/.ideavimrc<CR>
noremap <leader>vr :source ~/.ideavimrc<CR>


" TODO @alex go through the following keyboard mappings
" https://www.cyberwizard.io/posts/the-ultimate-ideavim-setup/
