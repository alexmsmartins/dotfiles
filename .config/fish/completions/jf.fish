# jf fish shell completion

function __fish_jf_no_subcommand --description 'Test if there has been any subcommand yet'
    for i in (commandline -opc)
        if contains -- $i rt access-token-create atc build-add-dependencies bad build-add-git bag build-append ba build-clean bc build-collect-env bce build-discard bdi build-docker-create bdc build-promote bpr build-publish bp build-scan bs copy cp curl cl delete del delete-props delp docker-promote dpr docker-pull dpl docker-push dp dotnet dotnet-config dotnetc download dl git-lfs-clean glc go go go-config go-publish gp gradle gradle-config gradlec group-add-users gau group-create gc group-delete gdel move mv mvn mvn-config mvnc npm-ci npmci npm-config npmc npm-install npmi npm-publish npmp nuget nuget-config nugetc nuget-deps-tree ndt oc osb permission-target-create ptc permission-target-delete ptdel permission-target-template ptt permission-target-update ptu ping p pip-config pipc pip-install pipi podman-pull ppl podman-push pp replication-create rplc replication-delete rpldel replication-template rplt repo-create rc repo-delete rdel repo-template rpt repo-update ru search s set-props sp transfer-config transfer-files transfer-settings upload u user-create users-create uc users-delete udel yarn yarn-config yarnc mc jpd-add ja jpd-delete jd license-acquire la license-deploy ld license-release lr xr audit-go ago audit-gradle ag audit-mvn am audit-npm an audit-pip ap curl cl offline-update ou scan s ds release-bundle-create rbc release-bundle-delete rbdel release-bundle-distribute rbd release-bundle-sign rbs release-bundle-update rbu completion bash fish zsh plugin install i publish p uninstall ui config c add edit export ex import im remove rm show s use project init ci-setup options audit aud build-scan bs scan s docker dotnet dotnet-config dotnetc go go go-config goc go-publish gp gradle gradle-config gradlec mvn mvn-config mvnc npm npm-config npmc nuget nuget-config nugetc pip pip-config pipc pipenv pipenv-config pipec poetry poetry-config poc terraform tf terraform-config tfc yarn yarn-config yarnc help h
            return 1
        end
    end
    return 0
end

complete -c jf -n '__fish_jf_no_subcommand' -f -l help -s h -d 'show help'
complete -c jf -n '__fish_jf_no_subcommand' -f -l version -s v -d 'print the version'
complete -c jf -n '__fish_jf_no_subcommand' -f -l help -s h -d 'show help'
complete -c jf -n '__fish_jf_no_subcommand' -f -l version -s v -d 'print the version'
complete -c jf -n '__fish_seen_subcommand_from rt' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_jf_no_subcommand' -a 'rt' -d 'Artifactory commands.'
complete -c jf -n '__fish_seen_subcommand_from access-token-create atc' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'access-token-create atc' -d 'Creates an access token. By default an user-scoped token will be created, unless the --groups and/or --grant-admin options are specified.'
complete -c jf -n '__fish_seen_subcommand_from access-token-create atc' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from access-token-create atc' -f -l audience -r -d '[Optional] A space-separate list of the other Artifactory instances or services that should accept this token identified by their Artifactory Service IDs, as obtained by the \'jfrog rt curl api/system/service_id\' command.` `'
complete -c jf -n '__fish_seen_subcommand_from access-token-create atc' -f -l client-cert-key-path -r -d '[Optional] Private key file for the client certificate in PEM format.` `'
complete -c jf -n '__fish_seen_subcommand_from access-token-create atc' -f -l client-cert-path -r -d '[Optional] Client certificate file in PEM format.` `'
complete -c jf -n '__fish_seen_subcommand_from access-token-create atc' -f -l expiry -r -d '[Default: 3600] The time in seconds for which the token will be valid. To specify a token that never expires, set to zero. Non-admin can only set a value that is equal to or less than the default 3600.` `'
complete -c jf -n '__fish_seen_subcommand_from access-token-create atc' -f -l grant-admin -d '[Default: false] Set to true to provides admin privileges to the access token. This is only available for administrators.` `'
complete -c jf -n '__fish_seen_subcommand_from access-token-create atc' -f -l groups -r -d '[Default: *] A list of comma-separated groups for the access token to be associated with. Specify * to indicate that this is a \'user-scoped token\', i.e., the token provides the same access privileges that the current subject has, and is therefore evaluated dynamically. A non-admin user can only provide a scope that is a subset of the groups to which he belongs` `'
complete -c jf -n '__fish_seen_subcommand_from access-token-create atc' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from access-token-create atc' -f -l refreshable -d '[Default: false] Set to true if you\'d like the token to be refreshable. A refresh token will also be returned in order to be used to generate a new token once it expires.` `'
complete -c jf -n '__fish_seen_subcommand_from access-token-create atc' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from access-token-create atc' -f -l ssh-key-path -r -d '[Optional] SSH key file path.` `'
complete -c jf -n '__fish_seen_subcommand_from access-token-create atc' -f -l ssh-passphrase -r -d '[Optional] SSH key passphrase.` `'
complete -c jf -n '__fish_seen_subcommand_from access-token-create atc' -f -l url -r -d '[Optional] JFrog Artifactory URL.` `'
complete -c jf -n '__fish_seen_subcommand_from access-token-create atc' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from build-add-dependencies bad' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'build-add-dependencies bad' -d 'Adds dependencies from the local file-system to the build info.'
complete -c jf -n '__fish_seen_subcommand_from build-add-dependencies bad' -f -l dry-run -d '[Default: false] Set to true to only get a summary of the dependencies that will be added to the build info.` `'
complete -c jf -n '__fish_seen_subcommand_from build-add-dependencies bad' -f -l exclusions -r -d '[Optional] Semicolon-separated list of exclude patterns. Exclude patterns may contain the * and the ? wildcards or a regex pattern, according to the value of the \'regexp\' option.` `'
complete -c jf -n '__fish_seen_subcommand_from build-add-dependencies bad' -f -l from-rt -d '[Default: false] Set true to search the files in Artifactory, rather than on the local file system. The --regexp option is not supported when --from-rt is set to true.` `'
complete -c jf -n '__fish_seen_subcommand_from build-add-dependencies bad' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from build-add-dependencies bad' -f -l recursive -d '[Default: true] Set to false if you do not wish to collect artifacts in sub-folders to be added to the build info.` `'
complete -c jf -n '__fish_seen_subcommand_from build-add-dependencies bad' -f -l regexp -d '[Default: false] Set to true to use a regular expression instead of wildcards expression to collect files to be added to the build info.` `'
complete -c jf -n '__fish_seen_subcommand_from build-add-dependencies bad' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from build-add-dependencies bad' -f -l spec -r -d '[Optional] Path to a File Spec.` `'
complete -c jf -n '__fish_seen_subcommand_from build-add-dependencies bad' -f -l spec-vars -r -d '[Optional] List of variables in the form of "key1=value1;key2=value2;..." to be replaced in the File Spec. In the File Spec, the variables should be used as follows: ${key1}.` `'
complete -c jf -n '__fish_seen_subcommand_from build-add-git bag' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'build-add-git bag' -d 'Collect VCS details from git and add them to a build.'
complete -c jf -n '__fish_seen_subcommand_from build-add-git bag' -f -l config -r -d '[Optional] Path to a configuration file.` `'
complete -c jf -n '__fish_seen_subcommand_from build-add-git bag' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from build-add-git bag' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from build-append ba' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'build-append ba' -d 'Append published build to the build info.'
complete -c jf -n '__fish_seen_subcommand_from build-append ba' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from build-append ba' -f -l build-url -r -d '[Optional] Can be used for setting the CI server build URL in the build-info.` `'
complete -c jf -n '__fish_seen_subcommand_from build-append ba' -f -l dry-run -d '[Default: false] Set to true to get a preview of the recorded build info, without publishing it to Artifactory.` `'
complete -c jf -n '__fish_seen_subcommand_from build-append ba' -f -l env-exclude -r -d '[Default: *password*;*psw*;*secret*;*key*;*token*;*auth*] List of case insensitive patterns in the form of "value1;value2;...". Environment variables match those patterns will be excluded.` `'
complete -c jf -n '__fish_seen_subcommand_from build-append ba' -f -l env-include -r -d '[Default: *] List of patterns in the form of "value1;value2;..." Only environment variables match those patterns will be included.` `'
complete -c jf -n '__fish_seen_subcommand_from build-append ba' -f -l insecure-tls -d '[Default: false] Set to true to skip TLS certificates verification.` `'
complete -c jf -n '__fish_seen_subcommand_from build-append ba' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from build-append ba' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from build-append ba' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from build-append ba' -f -l ssh-key-path -r -d '[Optional] SSH key file path.` `'
complete -c jf -n '__fish_seen_subcommand_from build-append ba' -f -l ssh-passphrase -r -d '[Optional] SSH key passphrase.` `'
complete -c jf -n '__fish_seen_subcommand_from build-append ba' -f -l url -r -d '[Optional] JFrog Artifactory URL.` `'
complete -c jf -n '__fish_seen_subcommand_from build-append ba' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from build-clean bc' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'build-clean bc' -d 'This command is used to clean (remove) build info collected locally.'
complete -c jf -n '__fish_seen_subcommand_from build-collect-env bce' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'build-collect-env bce' -d 'Collect environment variables. Environment variables can be excluded using the build-publish command.'
complete -c jf -n '__fish_seen_subcommand_from build-collect-env bce' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from build-discard bdi' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'build-discard bdi' -d 'Discard builds by setting retention parameters.'
complete -c jf -n '__fish_seen_subcommand_from build-discard bdi' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from build-discard bdi' -f -l async -d '[Default: false] If set to true, build discard will run asynchronously and will not wait for response.` `'
complete -c jf -n '__fish_seen_subcommand_from build-discard bdi' -f -l delete-artifacts -d '[Default: false] If set to true, automatically removes build artifacts stored in Artifactory.` `'
complete -c jf -n '__fish_seen_subcommand_from build-discard bdi' -f -l exclude-builds -r -d '[Optional] List of build numbers in the form of "value1,value2,...", that should not be removed from Artifactory.` `'
complete -c jf -n '__fish_seen_subcommand_from build-discard bdi' -f -l insecure-tls -d '[Default: false] Set to true to skip TLS certificates verification.` `'
complete -c jf -n '__fish_seen_subcommand_from build-discard bdi' -f -l max-builds -r -d '[Optional] The maximum number of builds to store in Artifactory.` `'
complete -c jf -n '__fish_seen_subcommand_from build-discard bdi' -f -l max-days -r -d '[Optional] The maximum number of days to keep builds in Artifactory.` `'
complete -c jf -n '__fish_seen_subcommand_from build-discard bdi' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from build-discard bdi' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from build-discard bdi' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from build-discard bdi' -f -l ssh-key-path -r -d '[Optional] SSH key file path.` `'
complete -c jf -n '__fish_seen_subcommand_from build-discard bdi' -f -l ssh-passphrase -r -d '[Optional] SSH key passphrase.` `'
complete -c jf -n '__fish_seen_subcommand_from build-discard bdi' -f -l url -r -d '[Optional] JFrog Artifactory URL.` `'
complete -c jf -n '__fish_seen_subcommand_from build-discard bdi' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from build-docker-create bdc' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'build-docker-create bdc' -d 'Add a published docker image to the build-info.'
complete -c jf -n '__fish_seen_subcommand_from build-docker-create bdc' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from build-docker-create bdc' -f -l build-name -r -d '[Optional] Providing this option will collect and record build info for this build name. Build number option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from build-docker-create bdc' -f -l build-number -r -d '[Optional] Providing this option will collect and record build info for this build number. Build name option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from build-docker-create bdc' -f -l image-file -r -d '[Mandatory] Path to a file which includes one line in the following format: <IMAGE-TAG>@sha256:<MANIFEST-SHA256>.` `'
complete -c jf -n '__fish_seen_subcommand_from build-docker-create bdc' -f -l module -r -d '[Optional] Optional module name for the build-info. Build name and number options are mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from build-docker-create bdc' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from build-docker-create bdc' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from build-docker-create bdc' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from build-docker-create bdc' -f -l ssh-key-path -r -d '[Optional] SSH key file path.` `'
complete -c jf -n '__fish_seen_subcommand_from build-docker-create bdc' -f -l ssh-passphrase -r -d '[Optional] SSH key passphrase.` `'
complete -c jf -n '__fish_seen_subcommand_from build-docker-create bdc' -f -l url -r -d '[Optional] JFrog Artifactory URL.` `'
complete -c jf -n '__fish_seen_subcommand_from build-docker-create bdc' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from build-promote bpr' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'build-promote bpr' -d 'This command is used to promote build in Artifactory.'
complete -c jf -n '__fish_seen_subcommand_from build-promote bpr' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from build-promote bpr' -f -l comment -r -d '[Optional] Build promotion comment.` `'
complete -c jf -n '__fish_seen_subcommand_from build-promote bpr' -f -l copy -d '[Default: false] If true, the build artifacts and dependencies are copied to the target repository, otherwise they are moved.` `'
complete -c jf -n '__fish_seen_subcommand_from build-promote bpr' -f -l dry-run -d '[Default: false] If true, promotion is only simulated. The build is not promoted.` `'
complete -c jf -n '__fish_seen_subcommand_from build-promote bpr' -f -l fail-fast -d '[Default: true] If true, fail and abort the operation upon receiving an error.` `'
complete -c jf -n '__fish_seen_subcommand_from build-promote bpr' -f -l include-dependencies -d '[Default: false] If true, the build dependencies are also promoted.` `'
complete -c jf -n '__fish_seen_subcommand_from build-promote bpr' -f -l insecure-tls -d '[Default: false] Set to true to skip TLS certificates verification.` `'
complete -c jf -n '__fish_seen_subcommand_from build-promote bpr' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from build-promote bpr' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from build-promote bpr' -f -l props -r -d '[Optional] List of properties in the form of "key1=value1;key2=value2,...". A list of properties to attach to the build artifacts.` `'
complete -c jf -n '__fish_seen_subcommand_from build-promote bpr' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from build-promote bpr' -f -l source-repo -r -d '[Optional] Build promotion source repository.` `'
complete -c jf -n '__fish_seen_subcommand_from build-promote bpr' -f -l ssh-key-path -r -d '[Optional] SSH key file path.` `'
complete -c jf -n '__fish_seen_subcommand_from build-promote bpr' -f -l ssh-passphrase -r -d '[Optional] SSH key passphrase.` `'
complete -c jf -n '__fish_seen_subcommand_from build-promote bpr' -f -l status -r -d '[Optional] Build promotion status.` `'
complete -c jf -n '__fish_seen_subcommand_from build-promote bpr' -f -l url -r -d '[Optional] JFrog Artifactory URL.` `'
complete -c jf -n '__fish_seen_subcommand_from build-promote bpr' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from build-publish bp' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'build-publish bp' -d 'Publish build info.'
complete -c jf -n '__fish_seen_subcommand_from build-publish bp' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from build-publish bp' -f -l build-url -r -d '[Optional] Can be used for setting the CI server build URL in the build-info.` `'
complete -c jf -n '__fish_seen_subcommand_from build-publish bp' -f -l detailed-summary -d '[Default: false] Set to true to get a command summary with details about the build info artifact.` `'
complete -c jf -n '__fish_seen_subcommand_from build-publish bp' -f -l dry-run -d '[Default: false] Set to true to get a preview of the recorded build info, without publishing it to Artifactory.` `'
complete -c jf -n '__fish_seen_subcommand_from build-publish bp' -f -l env-exclude -r -d '[Default: *password*;*psw*;*secret*;*key*;*token*;*auth*] List of case insensitive patterns in the form of "value1;value2;...". Environment variables match those patterns will be excluded.` `'
complete -c jf -n '__fish_seen_subcommand_from build-publish bp' -f -l env-include -r -d '[Default: *] List of patterns in the form of "value1;value2;..." Only environment variables match those patterns will be included.` `'
complete -c jf -n '__fish_seen_subcommand_from build-publish bp' -f -l insecure-tls -d '[Default: false] Set to true to skip TLS certificates verification.` `'
complete -c jf -n '__fish_seen_subcommand_from build-publish bp' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from build-publish bp' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from build-publish bp' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from build-publish bp' -f -l ssh-key-path -r -d '[Optional] SSH key file path.` `'
complete -c jf -n '__fish_seen_subcommand_from build-publish bp' -f -l ssh-passphrase -r -d '[Optional] SSH key passphrase.` `'
complete -c jf -n '__fish_seen_subcommand_from build-publish bp' -f -l url -r -d '[Optional] JFrog Artifactory URL.` `'
complete -c jf -n '__fish_seen_subcommand_from build-publish bp' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from build-scan bs' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'build-scan bs' -d 'Scan a published build-info with Xray.'
complete -c jf -n '__fish_seen_subcommand_from build-scan bs' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from build-scan bs' -f -l fail -d '[Default: true] Set to false if you do not wish the command to return exit code 3, even if the \'Fail Build\' rule is matched by Xray.` `'
complete -c jf -n '__fish_seen_subcommand_from build-scan bs' -f -l insecure-tls -d '[Default: false] Set to true to skip TLS certificates verification.` `'
complete -c jf -n '__fish_seen_subcommand_from build-scan bs' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from build-scan bs' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from build-scan bs' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from build-scan bs' -f -l ssh-key-path -r -d '[Optional] SSH key file path.` `'
complete -c jf -n '__fish_seen_subcommand_from build-scan bs' -f -l ssh-passphrase -r -d '[Optional] SSH key passphrase.` `'
complete -c jf -n '__fish_seen_subcommand_from build-scan bs' -f -l url -r -d '[Optional] JFrog Artifactory URL.` `'
complete -c jf -n '__fish_seen_subcommand_from build-scan bs' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from copy cp' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'copy cp' -d 'Copy files.'
complete -c jf -n '__fish_seen_subcommand_from copy cp' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from copy cp' -f -l archive-entries -r -d '[Optional] If specified, only archive artifacts containing entries matching this pattern are matched. You can use wildcards to specify multiple artifacts.` `'
complete -c jf -n '__fish_seen_subcommand_from copy cp' -f -l build -r -d '[Optional] If specified, only artifacts of the specified build are matched. The property format is build-name/build-number. If you do not specify the build number, the artifacts are filtered by the latest build number.` `'
complete -c jf -n '__fish_seen_subcommand_from copy cp' -f -l bundle -r -d '[Optional] If specified, only artifacts of the specified bundle are matched. The value format is bundle-name/bundle-version.` `'
complete -c jf -n '__fish_seen_subcommand_from copy cp' -f -l client-cert-key-path -r -d '[Optional] Private key file for the client certificate in PEM format.` `'
complete -c jf -n '__fish_seen_subcommand_from copy cp' -f -l client-cert-path -r -d '[Optional] Client certificate file in PEM format.` `'
complete -c jf -n '__fish_seen_subcommand_from copy cp' -f -l dry-run -d '[Default: false] Set to true to disable communication with Artifactory.` `'
complete -c jf -n '__fish_seen_subcommand_from copy cp' -f -l exclude-artifacts -r -d '[Default: false] If specified, build artifacts are not matched. Used together with the --build flag.` `'
complete -c jf -n '__fish_seen_subcommand_from copy cp' -f -l exclude-props -r -d '[Optional] List of properties in the form of "key1=value1;key2=value2,...". Only artifacts without the specified properties will be copied.` `'
complete -c jf -n '__fish_seen_subcommand_from copy cp' -f -l exclusions -r -d '[Optional] Semicolon-separated list of exclusions. Exclusions can include the * and the ? wildcards.` `'
complete -c jf -n '__fish_seen_subcommand_from copy cp' -f -l fail-no-op -d '[Default: false] Set to true if you\'d like the command to return exit code 2 in case of no files are affected.` `'
complete -c jf -n '__fish_seen_subcommand_from copy cp' -f -l flat -d '[Default: false] If set to false, files are copied according to their file system hierarchy.` `'
complete -c jf -n '__fish_seen_subcommand_from copy cp' -f -l include-deps -r -d '[Default: false] If specified, also dependencies of the specified build are matched. Used together with the --build flag.` `'
complete -c jf -n '__fish_seen_subcommand_from copy cp' -f -l insecure-tls -d '[Default: false] Set to true to skip TLS certificates verification.` `'
complete -c jf -n '__fish_seen_subcommand_from copy cp' -f -l limit -r -d '[Optional] The maximum number of items to fetch. Usually used with the \'sort-by\' option.` `'
complete -c jf -n '__fish_seen_subcommand_from copy cp' -f -l offset -r -d '[Optional] The offset from which to fetch items (i.e. how many items should be skipped). Usually used with the \'sort-by\' option.` `'
complete -c jf -n '__fish_seen_subcommand_from copy cp' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from copy cp' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from copy cp' -f -l props -r -d '[Optional] List of properties in the form of "key1=value1;key2=value2,...". Only artifacts with these properties will be copied.` `'
complete -c jf -n '__fish_seen_subcommand_from copy cp' -f -l recursive -d '[Default: true] Set to false if you do not wish to copy artifacts inside sub-folders in Artifactory.` `'
complete -c jf -n '__fish_seen_subcommand_from copy cp' -f -l retries -r -d '[Default: 3] Number of HTTP retries.` `'
complete -c jf -n '__fish_seen_subcommand_from copy cp' -f -l retry-wait-time -r -d '[Default: 0] Number of seconds or milliseconds to wait between retries. The numeric value should either end with s for seconds or ms for milliseconds.` `'
complete -c jf -n '__fish_seen_subcommand_from copy cp' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from copy cp' -f -l sort-by -r -d '[Optional] A list of semicolon-separated fields to sort by. The fields must be part of the \'items\' AQL domain. For more information, see https://www.jfrog.com/confluence/display/RTF/Artifactory+Query+Language#ArtifactoryQueryLanguage-EntitiesandFields` `'
complete -c jf -n '__fish_seen_subcommand_from copy cp' -f -l sort-order -r -d '[Default: asc] The order by which fields in the \'sort-by\' option should be sorted. Accepts \'asc\' or \'desc\'.` `'
complete -c jf -n '__fish_seen_subcommand_from copy cp' -f -l spec -r -d '[Optional] Path to a File Spec.` `'
complete -c jf -n '__fish_seen_subcommand_from copy cp' -f -l spec-vars -r -d '[Optional] List of variables in the form of "key1=value1;key2=value2;..." to be replaced in the File Spec. In the File Spec, the variables should be used as follows: ${key1}.` `'
complete -c jf -n '__fish_seen_subcommand_from copy cp' -f -l ssh-key-path -r -d '[Optional] SSH key file path.` `'
complete -c jf -n '__fish_seen_subcommand_from copy cp' -f -l ssh-passphrase -r -d '[Optional] SSH key passphrase.` `'
complete -c jf -n '__fish_seen_subcommand_from copy cp' -f -l threads -r -d '[Default: 3] Number of working threads.` `'
complete -c jf -n '__fish_seen_subcommand_from copy cp' -f -l url -r -d '[Optional] JFrog Artifactory URL.` `'
complete -c jf -n '__fish_seen_subcommand_from copy cp' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from curl cl' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'curl cl' -d 'Execute a cUrl command, using the configured Artifactory details.'
complete -c jf -n '__fish_seen_subcommand_from curl cl' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from delete del' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'delete del' -d 'Delete files.'
complete -c jf -n '__fish_seen_subcommand_from delete del' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from delete del' -f -l archive-entries -r -d '[Optional] If specified, only archive artifacts containing entries matching this pattern are matched. You can use wildcards to specify multiple artifacts.` `'
complete -c jf -n '__fish_seen_subcommand_from delete del' -f -l build -r -d '[Optional] If specified, only artifacts of the specified build are matched. The property format is build-name/build-number. If you do not specify the build number, the artifacts are filtered by the latest build number.` `'
complete -c jf -n '__fish_seen_subcommand_from delete del' -f -l client-cert-key-path -r -d '[Optional] Private key file for the client certificate in PEM format.` `'
complete -c jf -n '__fish_seen_subcommand_from delete del' -f -l client-cert-path -r -d '[Optional] Client certificate file in PEM format.` `'
complete -c jf -n '__fish_seen_subcommand_from delete del' -f -l dry-run -d '[Default: false] Set to true to disable communication with Artifactory.` `'
complete -c jf -n '__fish_seen_subcommand_from delete del' -f -l exclude-artifacts -r -d '[Default: false] If specified, build artifacts are not matched. Used together with the --build flag.` `'
complete -c jf -n '__fish_seen_subcommand_from delete del' -f -l exclude-props -r -d '[Optional] List of properties in the form of "key1=value1;key2=value2,...". Only artifacts without the specified properties will be deleted.` `'
complete -c jf -n '__fish_seen_subcommand_from delete del' -f -l exclusions -r -d '[Optional] Semicolon-separated list of exclusions. Exclusions can include the * and the ? wildcards.` `'
complete -c jf -n '__fish_seen_subcommand_from delete del' -f -l fail-no-op -d '[Default: false] Set to true if you\'d like the command to return exit code 2 in case of no files are affected.` `'
complete -c jf -n '__fish_seen_subcommand_from delete del' -f -l include-deps -r -d '[Default: false] If specified, also dependencies of the specified build are matched. Used together with the --build flag.` `'
complete -c jf -n '__fish_seen_subcommand_from delete del' -f -l insecure-tls -d '[Default: false] Set to true to skip TLS certificates verification.` `'
complete -c jf -n '__fish_seen_subcommand_from delete del' -f -l limit -r -d '[Optional] The maximum number of items to fetch. Usually used with the \'sort-by\' option.` `'
complete -c jf -n '__fish_seen_subcommand_from delete del' -f -l offset -r -d '[Optional] The offset from which to fetch items (i.e. how many items should be skipped). Usually used with the \'sort-by\' option.` `'
complete -c jf -n '__fish_seen_subcommand_from delete del' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from delete del' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from delete del' -f -l props -r -d '[Optional] List of properties in the form of "key1=value1;key2=value2,...". Only artifacts with these properties will be deleted.` `'
complete -c jf -n '__fish_seen_subcommand_from delete del' -f -l quiet -d '[Default: $CI] Set to true to skip the delete confirmation message.` `'
complete -c jf -n '__fish_seen_subcommand_from delete del' -f -l recursive -d '[Default: true] Set to false if you do not wish to delete artifacts inside sub-folders in Artifactory.` `'
complete -c jf -n '__fish_seen_subcommand_from delete del' -f -l retries -r -d '[Default: 3] Number of HTTP retries.` `'
complete -c jf -n '__fish_seen_subcommand_from delete del' -f -l retry-wait-time -r -d '[Default: 0] Number of seconds or milliseconds to wait between retries. The numeric value should either end with s for seconds or ms for milliseconds.` `'
complete -c jf -n '__fish_seen_subcommand_from delete del' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from delete del' -f -l sort-by -r -d '[Optional] A list of semicolon-separated fields to sort by. The fields must be part of the \'items\' AQL domain. For more information, see https://www.jfrog.com/confluence/display/RTF/Artifactory+Query+Language#ArtifactoryQueryLanguage-EntitiesandFields` `'
complete -c jf -n '__fish_seen_subcommand_from delete del' -f -l sort-order -r -d '[Default: asc] The order by which fields in the \'sort-by\' option should be sorted. Accepts \'asc\' or \'desc\'.` `'
complete -c jf -n '__fish_seen_subcommand_from delete del' -f -l spec -r -d '[Optional] Path to a File Spec.` `'
complete -c jf -n '__fish_seen_subcommand_from delete del' -f -l spec-vars -r -d '[Optional] List of variables in the form of "key1=value1;key2=value2;..." to be replaced in the File Spec. In the File Spec, the variables should be used as follows: ${key1}.` `'
complete -c jf -n '__fish_seen_subcommand_from delete del' -f -l ssh-key-path -r -d '[Optional] SSH key file path.` `'
complete -c jf -n '__fish_seen_subcommand_from delete del' -f -l ssh-passphrase -r -d '[Optional] SSH key passphrase.` `'
complete -c jf -n '__fish_seen_subcommand_from delete del' -f -l threads -r -d '[Default: 3] Number of working threads.` `'
complete -c jf -n '__fish_seen_subcommand_from delete del' -f -l url -r -d '[Optional] JFrog Artifactory URL.` `'
complete -c jf -n '__fish_seen_subcommand_from delete del' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from delete-props delp' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'delete-props delp' -d 'Delete properties on existing files in Artifactory.'
complete -c jf -n '__fish_seen_subcommand_from delete-props delp' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from delete-props delp' -f -l archive-entries -r -d '[Optional] If specified, only archive artifacts containing entries matching this pattern are matched. You can use wildcards to specify multiple artifacts.` `'
complete -c jf -n '__fish_seen_subcommand_from delete-props delp' -f -l build -r -d '[Optional] If specified, only artifacts of the specified build are matched. The property format is build-name/build-number. If you do not specify the build number, the artifacts are filtered by the latest build number.` `'
complete -c jf -n '__fish_seen_subcommand_from delete-props delp' -f -l bundle -r -d '[Optional] If specified, only artifacts of the specified bundle are matched. The value format is bundle-name/bundle-version.` `'
complete -c jf -n '__fish_seen_subcommand_from delete-props delp' -f -l client-cert-key-path -r -d '[Optional] Private key file for the client certificate in PEM format.` `'
complete -c jf -n '__fish_seen_subcommand_from delete-props delp' -f -l client-cert-path -r -d '[Optional] Client certificate file in PEM format.` `'
complete -c jf -n '__fish_seen_subcommand_from delete-props delp' -f -l exclude-artifacts -r -d '[Default: false] If specified, build artifacts are not matched. Used together with the --build flag.` `'
complete -c jf -n '__fish_seen_subcommand_from delete-props delp' -f -l exclude-props -r -d '[Optional] List of properties in the form of "key1=value1;key2=value2,...". Only artifacts without the specified properties are affected` `'
complete -c jf -n '__fish_seen_subcommand_from delete-props delp' -f -l exclusions -r -d '[Optional] Semicolon-separated list of exclusions. Exclusions can include the * and the ? wildcards.` `'
complete -c jf -n '__fish_seen_subcommand_from delete-props delp' -f -l fail-no-op -d '[Default: false] Set to true if you\'d like the command to return exit code 2 in case of no files are affected.` `'
complete -c jf -n '__fish_seen_subcommand_from delete-props delp' -f -l include-deps -r -d '[Default: false] If specified, also dependencies of the specified build are matched. Used together with the --build flag.` `'
complete -c jf -n '__fish_seen_subcommand_from delete-props delp' -f -l include-dirs -d '[Default: false] Set to true if you\'d like to also apply the source path pattern for directories and not just for files.` `'
complete -c jf -n '__fish_seen_subcommand_from delete-props delp' -f -l insecure-tls -d '[Default: false] Set to true to skip TLS certificates verification.` `'
complete -c jf -n '__fish_seen_subcommand_from delete-props delp' -f -l limit -r -d '[Optional] The maximum number of items to fetch. Usually used with the \'sort-by\' option.` `'
complete -c jf -n '__fish_seen_subcommand_from delete-props delp' -f -l offset -r -d '[Optional] The offset from which to fetch items (i.e. how many items should be skipped). Usually used with the \'sort-by\' option.` `'
complete -c jf -n '__fish_seen_subcommand_from delete-props delp' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from delete-props delp' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from delete-props delp' -f -l props -r -d '[Optional] List of properties in the form of "key1=value1;key2=value2,...". Only artifacts with these properties are affected.` `'
complete -c jf -n '__fish_seen_subcommand_from delete-props delp' -f -l recursive -d '[Default: true] When false, artifacts inside sub-folders in Artifactory will not be affected.` `'
complete -c jf -n '__fish_seen_subcommand_from delete-props delp' -f -l retries -r -d '[Default: 3] Number of HTTP retries.` `'
complete -c jf -n '__fish_seen_subcommand_from delete-props delp' -f -l retry-wait-time -r -d '[Default: 0] Number of seconds or milliseconds to wait between retries. The numeric value should either end with s for seconds or ms for milliseconds.` `'
complete -c jf -n '__fish_seen_subcommand_from delete-props delp' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from delete-props delp' -f -l sort-by -r -d '[Optional] A list of semicolon-separated fields to sort by. The fields must be part of the \'items\' AQL domain. For more information, see https://www.jfrog.com/confluence/display/RTF/Artifactory+Query+Language#ArtifactoryQueryLanguage-EntitiesandFields` `'
complete -c jf -n '__fish_seen_subcommand_from delete-props delp' -f -l sort-order -r -d '[Default: asc] The order by which fields in the \'sort-by\' option should be sorted. Accepts \'asc\' or \'desc\'.` `'
complete -c jf -n '__fish_seen_subcommand_from delete-props delp' -f -l spec -r -d '[Optional] Path to a File Spec.` `'
complete -c jf -n '__fish_seen_subcommand_from delete-props delp' -f -l spec-vars -r -d '[Optional] List of variables in the form of "key1=value1;key2=value2;..." to be replaced in the File Spec. In the File Spec, the variables should be used as follows: ${key1}.` `'
complete -c jf -n '__fish_seen_subcommand_from delete-props delp' -f -l ssh-key-path -r -d '[Optional] SSH key file path.` `'
complete -c jf -n '__fish_seen_subcommand_from delete-props delp' -f -l ssh-passphrase -r -d '[Optional] SSH key passphrase.` `'
complete -c jf -n '__fish_seen_subcommand_from delete-props delp' -f -l threads -r -d '[Default: 3] Number of working threads.` `'
complete -c jf -n '__fish_seen_subcommand_from delete-props delp' -f -l url -r -d '[Optional] JFrog Artifactory URL.` `'
complete -c jf -n '__fish_seen_subcommand_from delete-props delp' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from docker-promote dpr' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'docker-promote dpr' -d 'Promotes a Docker image from one repository to another. Supported by local repositories only.'
complete -c jf -n '__fish_seen_subcommand_from docker-promote dpr' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from docker-promote dpr' -f -l copy -d '[Default: false] If set true, the Docker image is copied to the target repository, otherwise it is moved.` `'
complete -c jf -n '__fish_seen_subcommand_from docker-promote dpr' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from docker-promote dpr' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from docker-promote dpr' -f -l source-tag -r -d '[Optional] The tag name to promote.` `'
complete -c jf -n '__fish_seen_subcommand_from docker-promote dpr' -f -l ssh-key-path -r -d '[Optional] SSH key file path.` `'
complete -c jf -n '__fish_seen_subcommand_from docker-promote dpr' -f -l ssh-passphrase -r -d '[Optional] SSH key passphrase.` `'
complete -c jf -n '__fish_seen_subcommand_from docker-promote dpr' -f -l target-docker-image -r -d '[Optional] Docker target image name.` `'
complete -c jf -n '__fish_seen_subcommand_from docker-promote dpr' -f -l target-tag -r -d '[Optional] The target tag to assign the image after promotion.` `'
complete -c jf -n '__fish_seen_subcommand_from docker-promote dpr' -f -l url -r -d '[Optional] JFrog Artifactory URL.` `'
complete -c jf -n '__fish_seen_subcommand_from docker-promote dpr' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from docker-pull dpl' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'docker-pull dpl' -d 'Docker pull.'
complete -c jf -n '__fish_seen_subcommand_from docker-pull dpl' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from docker-pull dpl' -f -l build-name -r -d '[Optional] Providing this option will collect and record build info for this build name. Build number option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from docker-pull dpl' -f -l build-number -r -d '[Optional] Providing this option will collect and record build info for this build number. Build name option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from docker-pull dpl' -f -l module -r -d '[Optional] Optional module name for the build-info. Build name and number options are mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from docker-pull dpl' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from docker-pull dpl' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from docker-pull dpl' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from docker-pull dpl' -f -l skip-login -d '[Default: false] Set to true if you\'d like the command to skip performing docker login.` `'
complete -c jf -n '__fish_seen_subcommand_from docker-pull dpl' -f -l ssh-key-path -r -d '[Optional] SSH key file path.` `'
complete -c jf -n '__fish_seen_subcommand_from docker-pull dpl' -f -l ssh-passphrase -r -d '[Optional] SSH key passphrase.` `'
complete -c jf -n '__fish_seen_subcommand_from docker-pull dpl' -f -l url -r -d '[Optional] JFrog Artifactory URL.` `'
complete -c jf -n '__fish_seen_subcommand_from docker-pull dpl' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from docker-push dp' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'docker-push dp' -d 'Docker push.'
complete -c jf -n '__fish_seen_subcommand_from docker-push dp' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from docker-push dp' -f -l build-name -r -d '[Optional] Providing this option will collect and record build info for this build name. Build number option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from docker-push dp' -f -l build-number -r -d '[Optional] Providing this option will collect and record build info for this build number. Build name option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from docker-push dp' -f -l detailed-summary -d '[Default: false] Set to true to include a list of the affected files in the command summary.` `'
complete -c jf -n '__fish_seen_subcommand_from docker-push dp' -f -l module -r -d '[Optional] Optional module name for the build-info. Build name and number options are mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from docker-push dp' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from docker-push dp' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from docker-push dp' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from docker-push dp' -f -l skip-login -d '[Default: false] Set to true if you\'d like the command to skip performing docker login.` `'
complete -c jf -n '__fish_seen_subcommand_from docker-push dp' -f -l ssh-key-path -r -d '[Optional] SSH key file path.` `'
complete -c jf -n '__fish_seen_subcommand_from docker-push dp' -f -l ssh-passphrase -r -d '[Optional] SSH key passphrase.` `'
complete -c jf -n '__fish_seen_subcommand_from docker-push dp' -f -l threads -r -d '[Default: 3] Number of working threads.` `'
complete -c jf -n '__fish_seen_subcommand_from docker-push dp' -f -l url -r -d '[Optional] JFrog Artifactory URL.` `'
complete -c jf -n '__fish_seen_subcommand_from docker-push dp' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from dotnet' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'dotnet' -d 'Run .NET Core CLI.'
complete -c jf -n '__fish_seen_subcommand_from dotnet' -f -l build-name -r -d '[Optional] Providing this option will collect and record build info for this build name. Build number option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from dotnet' -f -l build-number -r -d '[Optional] Providing this option will collect and record build info for this build number. Build name option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from dotnet' -f -l module -r -d '[Optional] Optional module name for the build-info. Build name and number options are mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from dotnet' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from dotnet-config dotnetc' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'dotnet-config dotnetc' -d 'Generate dotnet configuration.'
complete -c jf -n '__fish_seen_subcommand_from dotnet-config dotnetc' -f -l global -d '[Default: false] Set to true if you\'d like the configuration to be global (for all projects). Specific projects can override the global configuration.` `'
complete -c jf -n '__fish_seen_subcommand_from dotnet-config dotnetc' -f -l nuget-v2 -d '[Default: false] Set to true if you\'d like to use the NuGet V2 protocol when restoring packages from Artifactory.` `'
complete -c jf -n '__fish_seen_subcommand_from dotnet-config dotnetc' -f -l repo-resolve -r -d '[Optional] Repository for dependencies resolution.` `'
complete -c jf -n '__fish_seen_subcommand_from dotnet-config dotnetc' -f -l server-id-resolve -r -d '[Optional] Artifactory server ID for resolution. The server should configured using the \'jfrog c add\' command.` `'
complete -c jf -n '__fish_seen_subcommand_from download dl' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'download dl' -d 'Download files.'
complete -c jf -n '__fish_seen_subcommand_from download dl' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from download dl' -f -l archive-entries -r -d '[Optional] If specified, only archive artifacts containing entries matching this pattern are matched. You can use wildcards to specify multiple artifacts.` `'
complete -c jf -n '__fish_seen_subcommand_from download dl' -f -l build -r -d '[Optional] If specified, only artifacts of the specified build are matched. The property format is build-name/build-number. If you do not specify the build number, the artifacts are filtered by the latest build number.` `'
complete -c jf -n '__fish_seen_subcommand_from download dl' -f -l build-name -r -d '[Optional] Providing this option will collect and record build info for this build name. Build number option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from download dl' -f -l build-number -r -d '[Optional] Providing this option will collect and record build info for this build number. Build name option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from download dl' -f -l bundle -r -d '[Optional] If specified, only artifacts of the specified bundle are matched. The value format is bundle-name/bundle-version.` `'
complete -c jf -n '__fish_seen_subcommand_from download dl' -f -l client-cert-key-path -r -d '[Optional] Private key file for the client certificate in PEM format.` `'
complete -c jf -n '__fish_seen_subcommand_from download dl' -f -l client-cert-path -r -d '[Optional] Client certificate file in PEM format.` `'
complete -c jf -n '__fish_seen_subcommand_from download dl' -f -l detailed-summary -d '[Default: false] Set to true to include a list of the affected files in the command summary.` `'
complete -c jf -n '__fish_seen_subcommand_from download dl' -f -l dry-run -d '[Default: false] Set to true to disable communication with Artifactory.` `'
complete -c jf -n '__fish_seen_subcommand_from download dl' -f -l exclude-artifacts -r -d '[Default: false] If specified, build artifacts are not matched. Used together with the --build flag.` `'
complete -c jf -n '__fish_seen_subcommand_from download dl' -f -l exclude-props -r -d '[Optional] List of properties in the form of "key1=value1;key2=value2,...". Only artifacts without the specified properties will be downloaded.` `'
complete -c jf -n '__fish_seen_subcommand_from download dl' -f -l exclusions -r -d '[Optional] Semicolon-separated list of exclusions. Exclusions can include the * and the ? wildcards.` `'
complete -c jf -n '__fish_seen_subcommand_from download dl' -f -l explode -d '[Default: false] Set to true to extract an archive after it is downloaded from Artifactory.` `'
complete -c jf -n '__fish_seen_subcommand_from download dl' -f -l fail-no-op -d '[Default: false] Set to true if you\'d like the command to return exit code 2 in case of no files are affected.` `'
complete -c jf -n '__fish_seen_subcommand_from download dl' -f -l flat -d '[Default: false] Set to true if you do not wish to have the Artifactory repository path structure created locally for your downloaded files.` `'
complete -c jf -n '__fish_seen_subcommand_from download dl' -f -l gpg-key -r -d '[Optional] Path to the public GPG key file located on the file system, used to validate downloaded release bundles.` `'
complete -c jf -n '__fish_seen_subcommand_from download dl' -f -l include-deps -r -d '[Default: false] If specified, also dependencies of the specified build are matched. Used together with the --build flag.` `'
complete -c jf -n '__fish_seen_subcommand_from download dl' -f -l include-dirs -d '[Default: false] Set to true if you\'d like to also apply the source path pattern for directories and not just for files.` `'
complete -c jf -n '__fish_seen_subcommand_from download dl' -f -l insecure-tls -d '[Default: false] Set to true to skip TLS certificates verification.` `'
complete -c jf -n '__fish_seen_subcommand_from download dl' -f -l limit -r -d '[Optional] The maximum number of items to fetch. Usually used with the \'sort-by\' option.` `'
complete -c jf -n '__fish_seen_subcommand_from download dl' -f -l min-split -r -d '[Default: 5120] Minimum file size in KB to split into ranges when downloading. Set to -1 for no splits.` `'
complete -c jf -n '__fish_seen_subcommand_from download dl' -f -l module -r -d '[Optional] Optional module name for the build-info. Build name and number options are mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from download dl' -f -l offset -r -d '[Optional] The offset from which to fetch items (i.e. how many items should be skipped). Usually used with the \'sort-by\' option.` `'
complete -c jf -n '__fish_seen_subcommand_from download dl' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from download dl' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from download dl' -f -l props -r -d '[Optional] List of properties in the form of "key1=value1;key2=value2,...". Only artifacts with these properties will be downloaded.` `'
complete -c jf -n '__fish_seen_subcommand_from download dl' -f -l quiet -d '[Default: $CI] Set to true to skip the sync-deletes confirmation message.` `'
complete -c jf -n '__fish_seen_subcommand_from download dl' -f -l recursive -d '[Default: true] Set to false if you do not wish to include the download of artifacts inside sub-folders in Artifactory.` `'
complete -c jf -n '__fish_seen_subcommand_from download dl' -f -l retries -r -d '[Default: 3] Number of HTTP retries.` `'
complete -c jf -n '__fish_seen_subcommand_from download dl' -f -l retry-wait-time -r -d '[Default: 0] Number of seconds or milliseconds to wait between retries. The numeric value should either end with s for seconds or ms for milliseconds.` `'
complete -c jf -n '__fish_seen_subcommand_from download dl' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from download dl' -f -l skip-checksum -d '[Default: false] Set to true to skip checksum verification when downloading.` `'
complete -c jf -n '__fish_seen_subcommand_from download dl' -f -l sort-by -r -d '[Optional] A list of semicolon-separated fields to sort by. The fields must be part of the \'items\' AQL domain. For more information, see https://www.jfrog.com/confluence/display/RTF/Artifactory+Query+Language#ArtifactoryQueryLanguage-EntitiesandFields` `'
complete -c jf -n '__fish_seen_subcommand_from download dl' -f -l sort-order -r -d '[Default: asc] The order by which fields in the \'sort-by\' option should be sorted. Accepts \'asc\' or \'desc\'.` `'
complete -c jf -n '__fish_seen_subcommand_from download dl' -f -l spec -r -d '[Optional] Path to a File Spec.` `'
complete -c jf -n '__fish_seen_subcommand_from download dl' -f -l spec-vars -r -d '[Optional] List of variables in the form of "key1=value1;key2=value2;..." to be replaced in the File Spec. In the File Spec, the variables should be used as follows: ${key1}.` `'
complete -c jf -n '__fish_seen_subcommand_from download dl' -f -l split-count -r -d '[Default: 3] Number of parts to split a file when downloading. Set to 0 for no splits.` `'
complete -c jf -n '__fish_seen_subcommand_from download dl' -f -l ssh-key-path -r -d '[Optional] SSH key file path.` `'
complete -c jf -n '__fish_seen_subcommand_from download dl' -f -l ssh-passphrase -r -d '[Optional] SSH key passphrase.` `'
complete -c jf -n '__fish_seen_subcommand_from download dl' -f -l sync-deletes -r -d '[Optional] Specific path in the local file system, under which to sync dependencies after the download. After the download, this path will include only the dependencies downloaded during this download operation. The other files under this path will be deleted.` `'
complete -c jf -n '__fish_seen_subcommand_from download dl' -f -l threads -r -d '[Default: 3] Number of working threads.` `'
complete -c jf -n '__fish_seen_subcommand_from download dl' -f -l url -r -d '[Optional] JFrog Artifactory URL.` `'
complete -c jf -n '__fish_seen_subcommand_from download dl' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from download dl' -f -l validate-symlinks -d '[Default: false] Set to true to perform a checksum validation when downloading symbolic links.` `'
complete -c jf -n '__fish_seen_subcommand_from git-lfs-clean glc' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'git-lfs-clean glc' -d 'Clean files from a Git LFS repository. The command deletes all files from a Git LFS repository that are no longer available in a corresponding Git repository.'
complete -c jf -n '__fish_seen_subcommand_from git-lfs-clean glc' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from git-lfs-clean glc' -f -l dry-run -d '[Default: false] If true, cleanup is only simulated. No files are actually deleted.` `'
complete -c jf -n '__fish_seen_subcommand_from git-lfs-clean glc' -f -l insecure-tls -d '[Default: false] Set to true to skip TLS certificates verification.` `'
complete -c jf -n '__fish_seen_subcommand_from git-lfs-clean glc' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from git-lfs-clean glc' -f -l quiet -d '[Default: $CI] Set to true to skip the delete confirmation message.` `'
complete -c jf -n '__fish_seen_subcommand_from git-lfs-clean glc' -f -l refs -r -d '[Default: refs/remotes/*] List of Git references in the form of "ref1,ref2,..." which should be preserved.` `'
complete -c jf -n '__fish_seen_subcommand_from git-lfs-clean glc' -f -l repo -r -d '[Optional] Local Git LFS repository which should be cleaned. If omitted, this is detected from the Git repository.` `'
complete -c jf -n '__fish_seen_subcommand_from git-lfs-clean glc' -f -l retries -r -d '[Default: 3] Number of HTTP retries.` `'
complete -c jf -n '__fish_seen_subcommand_from git-lfs-clean glc' -f -l retry-wait-time -r -d '[Default: 0] Number of seconds or milliseconds to wait between retries. The numeric value should either end with s for seconds or ms for milliseconds.` `'
complete -c jf -n '__fish_seen_subcommand_from git-lfs-clean glc' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from git-lfs-clean glc' -f -l ssh-key-path -r -d '[Optional] SSH key file path.` `'
complete -c jf -n '__fish_seen_subcommand_from git-lfs-clean glc' -f -l ssh-passphrase -r -d '[Optional] SSH key passphrase.` `'
complete -c jf -n '__fish_seen_subcommand_from git-lfs-clean glc' -f -l url -r -d '[Optional] JFrog Artifactory URL.` `'
complete -c jf -n '__fish_seen_subcommand_from git-lfs-clean glc' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from go go' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'go go' -d 'Runs go.'
complete -c jf -n '__fish_seen_subcommand_from go go' -f -l build-name -r -d '[Optional] Providing this option will collect and record build info for this build name. Build number option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from go go' -f -l build-number -r -d '[Optional] Providing this option will collect and record build info for this build number. Build name option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from go go' -f -l module -r -d '[Optional] Optional module name for the build-info. Build name and number options are mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from go go' -f -l no-fallback -d '[Default: false] Set to true to avoid downloading packages from the VCS, if they are missing in Artifactory.` `'
complete -c jf -n '__fish_seen_subcommand_from go go' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from go-config' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'go-config' -d 'Generate go build configuration.'
complete -c jf -n '__fish_seen_subcommand_from go-config' -f -l global -d '[Default: false] Set to true if you\'d like the configuration to be global (for all projects). Specific projects can override the global configuration.` `'
complete -c jf -n '__fish_seen_subcommand_from go-config' -f -l repo-deploy -r -d '[Optional] Repository for artifacts deployment.` `'
complete -c jf -n '__fish_seen_subcommand_from go-config' -f -l repo-resolve -r -d '[Optional] Repository for dependencies resolution.` `'
complete -c jf -n '__fish_seen_subcommand_from go-config' -f -l server-id-deploy -r -d '[Optional] Artifactory server ID for deployment. The server should configured using the \'jfrog c add\' command.` `'
complete -c jf -n '__fish_seen_subcommand_from go-config' -f -l server-id-resolve -r -d '[Optional] Artifactory server ID for resolution. The server should configured using the \'jfrog c add\' command.` `'
complete -c jf -n '__fish_seen_subcommand_from go-publish gp' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'go-publish gp' -d 'Publish go package and/or its dependencies to Artifactory.'
complete -c jf -n '__fish_seen_subcommand_from go-publish gp' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from go-publish gp' -f -l build-name -r -d '[Optional] Providing this option will collect and record build info for this build name. Build number option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from go-publish gp' -f -l build-number -r -d '[Optional] Providing this option will collect and record build info for this build number. Build name option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from go-publish gp' -f -l detailed-summary -d '[Default: false] Set to true to include a list of the affected files in the command summary.` `'
complete -c jf -n '__fish_seen_subcommand_from go-publish gp' -f -l module -r -d '[Optional] Optional module name for the build-info. Build name and number options are mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from go-publish gp' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from go-publish gp' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from go-publish gp' -f -l url -r -d '[Optional] JFrog Artifactory URL.` `'
complete -c jf -n '__fish_seen_subcommand_from go-publish gp' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from gradle' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'gradle' -d 'Run Gradle build.'
complete -c jf -n '__fish_seen_subcommand_from gradle' -f -l build-name -r -d '[Optional] Providing this option will collect and record build info for this build name. Build number option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from gradle' -f -l build-number -r -d '[Optional] Providing this option will collect and record build info for this build number. Build name option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from gradle' -f -l detailed-summary -d '[Default: false] Set to true to include a list of the affected files in the command summary.` `'
complete -c jf -n '__fish_seen_subcommand_from gradle' -f -l format -r -d '[Default: table] Defines the output format of the command. Acceptable values are: table, json, simple-json and sarif.` `'
complete -c jf -n '__fish_seen_subcommand_from gradle' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from gradle' -f -l scan -r -d '[Default: false] Set if you\'d like all files to be scanned by Xray on the local file system prior to the upload, and skip the upload if any of the files are found vulnerable.` `'
complete -c jf -n '__fish_seen_subcommand_from gradle' -f -l threads -r -d '[Default: 3] Number of threads for uploading build artifacts.` `'
complete -c jf -n '__fish_seen_subcommand_from gradle-config gradlec' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'gradle-config gradlec' -d 'Generate gradle build configuration.'
complete -c jf -n '__fish_seen_subcommand_from gradle-config gradlec' -f -l deploy-ivy-desc -d '[Default: true] Set to false if you do not wish to deploy Ivy descriptors.` `'
complete -c jf -n '__fish_seen_subcommand_from gradle-config gradlec' -f -l deploy-maven-desc -d '[Default: true] Set to false if you do not wish to deploy Maven descriptors.` `'
complete -c jf -n '__fish_seen_subcommand_from gradle-config gradlec' -f -l global -d '[Default: false] Set to true if you\'d like the configuration to be global (for all projects). Specific projects can override the global configuration.` `'
complete -c jf -n '__fish_seen_subcommand_from gradle-config gradlec' -f -l ivy-artifacts-pattern -r -d '[Default: \'[organization]/[module]/[revision]/[artifact]-[revision](-[classifier]).[ext]\' Set the deployed Ivy artifacts pattern.` `'
complete -c jf -n '__fish_seen_subcommand_from gradle-config gradlec' -f -l ivy-desc-pattern -r -d '[Default: \'[organization]/[module]/ivy-[revision].xml\' Set the deployed Ivy descriptor pattern.` `'
complete -c jf -n '__fish_seen_subcommand_from gradle-config gradlec' -f -l repo-deploy -r -d '[Optional] Repository for artifacts deployment.` `'
complete -c jf -n '__fish_seen_subcommand_from gradle-config gradlec' -f -l repo-resolve -r -d '[Optional] Repository for dependencies resolution.` `'
complete -c jf -n '__fish_seen_subcommand_from gradle-config gradlec' -f -l server-id-deploy -r -d '[Optional] Artifactory server ID for deployment. The server should configured using the \'jfrog c add\' command.` `'
complete -c jf -n '__fish_seen_subcommand_from gradle-config gradlec' -f -l server-id-resolve -r -d '[Optional] Artifactory server ID for resolution. The server should configured using the \'jfrog c add\' command.` `'
complete -c jf -n '__fish_seen_subcommand_from gradle-config gradlec' -f -l use-wrapper -d '[Default: false] [Gradle] Set to true if you\'d like to use the Gradle wrapper.` `'
complete -c jf -n '__fish_seen_subcommand_from gradle-config gradlec' -f -l uses-plugin -d '[Default: false] Set to true if the Gradle Artifactory Plugin is already applied in the build script.` `'
complete -c jf -n '__fish_seen_subcommand_from group-add-users gau' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'group-add-users gau' -d 'Add a list of users to a group.'
complete -c jf -n '__fish_seen_subcommand_from group-add-users gau' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from group-add-users gau' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from group-add-users gau' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from group-add-users gau' -f -l ssh-key-path -r -d '[Optional] SSH key file path.` `'
complete -c jf -n '__fish_seen_subcommand_from group-add-users gau' -f -l ssh-passphrase -r -d '[Optional] SSH key passphrase.` `'
complete -c jf -n '__fish_seen_subcommand_from group-add-users gau' -f -l url -r -d '[Optional] JFrog Artifactory URL.` `'
complete -c jf -n '__fish_seen_subcommand_from group-add-users gau' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from group-create gc' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'group-create gc' -d 'Create new users group.'
complete -c jf -n '__fish_seen_subcommand_from group-create gc' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from group-create gc' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from group-create gc' -f -l replace -d '[Default: false] Set to true if you\'d like existing users or groups to be replaced.` `'
complete -c jf -n '__fish_seen_subcommand_from group-create gc' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from group-create gc' -f -l ssh-key-path -r -d '[Optional] SSH key file path.` `'
complete -c jf -n '__fish_seen_subcommand_from group-create gc' -f -l ssh-passphrase -r -d '[Optional] SSH key passphrase.` `'
complete -c jf -n '__fish_seen_subcommand_from group-create gc' -f -l url -r -d '[Optional] JFrog Artifactory URL.` `'
complete -c jf -n '__fish_seen_subcommand_from group-create gc' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from group-delete gdel' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'group-delete gdel' -d 'Delete a users group.'
complete -c jf -n '__fish_seen_subcommand_from group-delete gdel' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from group-delete gdel' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from group-delete gdel' -f -l quiet -d '[Default: $CI] Set to true to skip the delete confirmation message.` `'
complete -c jf -n '__fish_seen_subcommand_from group-delete gdel' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from group-delete gdel' -f -l ssh-key-path -r -d '[Optional] SSH key file path.` `'
complete -c jf -n '__fish_seen_subcommand_from group-delete gdel' -f -l ssh-passphrase -r -d '[Optional] SSH key passphrase.` `'
complete -c jf -n '__fish_seen_subcommand_from group-delete gdel' -f -l url -r -d '[Optional] JFrog Artifactory URL.` `'
complete -c jf -n '__fish_seen_subcommand_from group-delete gdel' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from move mv' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'move mv' -d 'Move files.'
complete -c jf -n '__fish_seen_subcommand_from move mv' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from move mv' -f -l archive-entries -r -d '[Optional] If specified, only archive artifacts containing entries matching this pattern are matched. You can use wildcards to specify multiple artifacts.` `'
complete -c jf -n '__fish_seen_subcommand_from move mv' -f -l build -r -d '[Optional] If specified, only artifacts of the specified build are matched. The property format is build-name/build-number. If you do not specify the build number, the artifacts are filtered by the latest build number.` `'
complete -c jf -n '__fish_seen_subcommand_from move mv' -f -l client-cert-key-path -r -d '[Optional] Private key file for the client certificate in PEM format.` `'
complete -c jf -n '__fish_seen_subcommand_from move mv' -f -l client-cert-path -r -d '[Optional] Client certificate file in PEM format.` `'
complete -c jf -n '__fish_seen_subcommand_from move mv' -f -l dry-run -d '[Default: false] Set to true to disable communication with Artifactory.` `'
complete -c jf -n '__fish_seen_subcommand_from move mv' -f -l exclude-artifacts -r -d '[Default: false] If specified, build artifacts are not matched. Used together with the --build flag.` `'
complete -c jf -n '__fish_seen_subcommand_from move mv' -f -l exclude-props -r -d '[Optional] List of properties in the form of "key1=value1;key2=value2,...". Only artifacts without the specified properties will be moved.` `'
complete -c jf -n '__fish_seen_subcommand_from move mv' -f -l exclusions -r -d '[Optional] Semicolon-separated list of exclusions. Exclusions can include the * and the ? wildcards.` `'
complete -c jf -n '__fish_seen_subcommand_from move mv' -f -l fail-no-op -d '[Default: false] Set to true if you\'d like the command to return exit code 2 in case of no files are affected.` `'
complete -c jf -n '__fish_seen_subcommand_from move mv' -f -l flat -d '[Default: false] If set to false, files are moved according to their file system hierarchy.` `'
complete -c jf -n '__fish_seen_subcommand_from move mv' -f -l include-deps -r -d '[Default: false] If specified, also dependencies of the specified build are matched. Used together with the --build flag.` `'
complete -c jf -n '__fish_seen_subcommand_from move mv' -f -l insecure-tls -d '[Default: false] Set to true to skip TLS certificates verification.` `'
complete -c jf -n '__fish_seen_subcommand_from move mv' -f -l limit -r -d '[Optional] The maximum number of items to fetch. Usually used with the \'sort-by\' option.` `'
complete -c jf -n '__fish_seen_subcommand_from move mv' -f -l offset -r -d '[Optional] The offset from which to fetch items (i.e. how many items should be skipped). Usually used with the \'sort-by\' option.` `'
complete -c jf -n '__fish_seen_subcommand_from move mv' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from move mv' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from move mv' -f -l props -r -d '[Optional] List of properties in the form of "key1=value1;key2=value2,...". Only artifacts with these properties will be moved.` `'
complete -c jf -n '__fish_seen_subcommand_from move mv' -f -l recursive -d '[Default: true] Set to false if you do not wish to move artifacts inside sub-folders in Artifactory.` `'
complete -c jf -n '__fish_seen_subcommand_from move mv' -f -l retries -r -d '[Default: 3] Number of HTTP retries.` `'
complete -c jf -n '__fish_seen_subcommand_from move mv' -f -l retry-wait-time -r -d '[Default: 0] Number of seconds or milliseconds to wait between retries. The numeric value should either end with s for seconds or ms for milliseconds.` `'
complete -c jf -n '__fish_seen_subcommand_from move mv' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from move mv' -f -l sort-by -r -d '[Optional] A list of semicolon-separated fields to sort by. The fields must be part of the \'items\' AQL domain. For more information, see https://www.jfrog.com/confluence/display/RTF/Artifactory+Query+Language#ArtifactoryQueryLanguage-EntitiesandFields` `'
complete -c jf -n '__fish_seen_subcommand_from move mv' -f -l sort-order -r -d '[Default: asc] The order by which fields in the \'sort-by\' option should be sorted. Accepts \'asc\' or \'desc\'.` `'
complete -c jf -n '__fish_seen_subcommand_from move mv' -f -l spec -r -d '[Optional] Path to a File Spec.` `'
complete -c jf -n '__fish_seen_subcommand_from move mv' -f -l spec-vars -r -d '[Optional] List of variables in the form of "key1=value1;key2=value2;..." to be replaced in the File Spec. In the File Spec, the variables should be used as follows: ${key1}.` `'
complete -c jf -n '__fish_seen_subcommand_from move mv' -f -l ssh-key-path -r -d '[Optional] SSH key file path.` `'
complete -c jf -n '__fish_seen_subcommand_from move mv' -f -l ssh-passphrase -r -d '[Optional] SSH key passphrase.` `'
complete -c jf -n '__fish_seen_subcommand_from move mv' -f -l threads -r -d '[Default: 3] Number of working threads.` `'
complete -c jf -n '__fish_seen_subcommand_from move mv' -f -l url -r -d '[Optional] JFrog Artifactory URL.` `'
complete -c jf -n '__fish_seen_subcommand_from move mv' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from mvn' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'mvn' -d 'Run Maven build.'
complete -c jf -n '__fish_seen_subcommand_from mvn' -f -l build-name -r -d '[Optional] Providing this option will collect and record build info for this build name. Build number option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from mvn' -f -l build-number -r -d '[Optional] Providing this option will collect and record build info for this build number. Build name option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from mvn' -f -l detailed-summary -d '[Default: false] Set to true to include a list of the affected files in the command summary.` `'
complete -c jf -n '__fish_seen_subcommand_from mvn' -f -l format -r -d '[Default: table] Defines the output format of the command. Acceptable values are: table, json, simple-json and sarif.` `'
complete -c jf -n '__fish_seen_subcommand_from mvn' -f -l insecure-tls -d '[Default: false] Set to true to skip TLS certificates verification.` `'
complete -c jf -n '__fish_seen_subcommand_from mvn' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from mvn' -f -l scan -r -d '[Default: false] Set if you\'d like all files to be scanned by Xray on the local file system prior to the upload, and skip the upload if any of the files are found vulnerable.` `'
complete -c jf -n '__fish_seen_subcommand_from mvn' -f -l threads -r -d '[Default: 3] Number of threads for uploading build artifacts.` `'
complete -c jf -n '__fish_seen_subcommand_from mvn-config mvnc' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'mvn-config mvnc' -d 'Generate maven build configuration.'
complete -c jf -n '__fish_seen_subcommand_from mvn-config mvnc' -f -l exclude-patterns -r -d '[Optional] Filter deployed artifacts by setting a wildcard pattern that specifies which artifacts to exclude. You may provide multiple patterns separated by \', \'.` `'
complete -c jf -n '__fish_seen_subcommand_from mvn-config mvnc' -f -l global -d '[Default: false] Set to true if you\'d like the configuration to be global (for all projects). Specific projects can override the global configuration.` `'
complete -c jf -n '__fish_seen_subcommand_from mvn-config mvnc' -f -l include-patterns -r -d '[Optional] Filter deployed artifacts by setting a wildcard pattern that specifies which artifacts to include. You may provide multiple patterns separated by \', \'.` `'
complete -c jf -n '__fish_seen_subcommand_from mvn-config mvnc' -f -l repo-deploy-releases -r -d '[Optional] Deployment repository for release artifacts.` `'
complete -c jf -n '__fish_seen_subcommand_from mvn-config mvnc' -f -l repo-deploy-snapshots -r -d '[Optional] Deployment repository for snapshot artifacts.` `'
complete -c jf -n '__fish_seen_subcommand_from mvn-config mvnc' -f -l repo-resolve-releases -r -d '[Optional] Resolution repository for release dependencies.` `'
complete -c jf -n '__fish_seen_subcommand_from mvn-config mvnc' -f -l repo-resolve-snapshots -r -d '[Optional] Resolution repository for snapshot dependencies.` `'
complete -c jf -n '__fish_seen_subcommand_from mvn-config mvnc' -f -l server-id-deploy -r -d '[Optional] Artifactory server ID for deployment. The server should configured using the \'jfrog c add\' command.` `'
complete -c jf -n '__fish_seen_subcommand_from mvn-config mvnc' -f -l server-id-resolve -r -d '[Optional] Artifactory server ID for resolution. The server should configured using the \'jfrog c add\' command.` `'
complete -c jf -n '__fish_seen_subcommand_from npm-ci npmci' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'npm-ci npmci' -d 'Run npm ci.'
complete -c jf -n '__fish_seen_subcommand_from npm-ci npmci' -f -l build-name -r -d '[Optional] Providing this option will collect and record build info for this build name. Build number option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from npm-ci npmci' -f -l build-number -r -d '[Optional] Providing this option will collect and record build info for this build number. Build name option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from npm-ci npmci' -f -l module -r -d '[Optional] Optional module name for the build-info. Build name and number options are mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from npm-ci npmci' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from npm-config npmc' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'npm-config npmc' -d 'Generate npm configuration.'
complete -c jf -n '__fish_seen_subcommand_from npm-config npmc' -f -l global -d '[Default: false] Set to true if you\'d like the configuration to be global (for all projects). Specific projects can override the global configuration.` `'
complete -c jf -n '__fish_seen_subcommand_from npm-config npmc' -f -l repo-deploy -r -d '[Optional] Repository for artifacts deployment.` `'
complete -c jf -n '__fish_seen_subcommand_from npm-config npmc' -f -l repo-resolve -r -d '[Optional] Repository for dependencies resolution.` `'
complete -c jf -n '__fish_seen_subcommand_from npm-config npmc' -f -l server-id-deploy -r -d '[Optional] Artifactory server ID for deployment. The server should configured using the \'jfrog c add\' command.` `'
complete -c jf -n '__fish_seen_subcommand_from npm-config npmc' -f -l server-id-resolve -r -d '[Optional] Artifactory server ID for resolution. The server should configured using the \'jfrog c add\' command.` `'
complete -c jf -n '__fish_seen_subcommand_from npm-install npmi' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'npm-install npmi' -d 'Run npm install.'
complete -c jf -n '__fish_seen_subcommand_from npm-install npmi' -f -l build-name -r -d '[Optional] Providing this option will collect and record build info for this build name. Build number option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from npm-install npmi' -f -l build-number -r -d '[Optional] Providing this option will collect and record build info for this build number. Build name option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from npm-install npmi' -f -l module -r -d '[Optional] Optional module name for the build-info. Build name and number options are mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from npm-install npmi' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from npm-publish npmp' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'npm-publish npmp' -d 'Packs and deploys the npm package to the designated npm repository.'
complete -c jf -n '__fish_seen_subcommand_from npm-publish npmp' -f -l build-name -r -d '[Optional] Providing this option will collect and record build info for this build name. Build number option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from npm-publish npmp' -f -l build-number -r -d '[Optional] Providing this option will collect and record build info for this build number. Build name option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from npm-publish npmp' -f -l detailed-summary -d '[Default: false] Set to true to include a list of the affected files in the command summary.` `'
complete -c jf -n '__fish_seen_subcommand_from npm-publish npmp' -f -l format -r -d '[Default: table] Defines the output format of the command. Acceptable values are: table, json, simple-json and sarif.` `'
complete -c jf -n '__fish_seen_subcommand_from npm-publish npmp' -f -l module -r -d '[Optional] Optional module name for the build-info. Build name and number options are mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from npm-publish npmp' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from npm-publish npmp' -f -l scan -r -d '[Default: false] Set if you\'d like all files to be scanned by Xray on the local file system prior to the upload, and skip the upload if any of the files are found vulnerable.` `'
complete -c jf -n '__fish_seen_subcommand_from nuget' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'nuget' -d 'Run NuGet.'
complete -c jf -n '__fish_seen_subcommand_from nuget' -f -l build-name -r -d '[Optional] Providing this option will collect and record build info for this build name. Build number option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from nuget' -f -l build-number -r -d '[Optional] Providing this option will collect and record build info for this build number. Build name option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from nuget' -f -l module -r -d '[Optional] Optional module name for the build-info. Build name and number options are mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from nuget' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from nuget-config nugetc' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'nuget-config nugetc' -d 'Generate nuget configuration.'
complete -c jf -n '__fish_seen_subcommand_from nuget-config nugetc' -f -l global -d '[Default: false] Set to true if you\'d like the configuration to be global (for all projects). Specific projects can override the global configuration.` `'
complete -c jf -n '__fish_seen_subcommand_from nuget-config nugetc' -f -l nuget-v2 -d '[Default: false] Set to true if you\'d like to use the NuGet V2 protocol when restoring packages from Artifactory.` `'
complete -c jf -n '__fish_seen_subcommand_from nuget-config nugetc' -f -l repo-resolve -r -d '[Optional] Repository for dependencies resolution.` `'
complete -c jf -n '__fish_seen_subcommand_from nuget-config nugetc' -f -l server-id-resolve -r -d '[Optional] Artifactory server ID for resolution. The server should configured using the \'jfrog c add\' command.` `'
complete -c jf -n '__fish_seen_subcommand_from nuget-deps-tree ndt' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'nuget-deps-tree ndt' -d 'Show solution dependency tree.'
complete -c jf -n '__fish_seen_subcommand_from oc osb' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'oc osb' -d 'Run OpenShift CLI (oc) start-build command.'
complete -c jf -n '__fish_seen_subcommand_from oc osb' -f -l build-name -r -d '[Optional] Providing this option will collect and record build info for this build name. Build number option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from oc osb' -f -l build-number -r -d '[Optional] Providing this option will collect and record build info for this build number. Build name option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from oc osb' -f -l module -r -d '[Optional] Optional module name for the build-info. Build name and number options are mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from oc osb' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from oc osb' -f -l repo -r -d '[Mandatory] The name of the repository to which the image was pushed.` `'
complete -c jf -n '__fish_seen_subcommand_from oc osb' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from permission-target-create ptc' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'permission-target-create ptc' -d 'Create a new permission target in the JFrog Platform.'
complete -c jf -n '__fish_seen_subcommand_from permission-target-create ptc' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from permission-target-create ptc' -f -l client-cert-key-path -r -d '[Optional] Private key file for the client certificate in PEM format.` `'
complete -c jf -n '__fish_seen_subcommand_from permission-target-create ptc' -f -l client-cert-path -r -d '[Optional] Client certificate file in PEM format.` `'
complete -c jf -n '__fish_seen_subcommand_from permission-target-create ptc' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from permission-target-create ptc' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from permission-target-create ptc' -f -l ssh-key-path -r -d '[Optional] SSH key file path.` `'
complete -c jf -n '__fish_seen_subcommand_from permission-target-create ptc' -f -l ssh-passphrase -r -d '[Optional] SSH key passphrase.` `'
complete -c jf -n '__fish_seen_subcommand_from permission-target-create ptc' -f -l url -r -d '[Optional] JFrog Artifactory URL.` `'
complete -c jf -n '__fish_seen_subcommand_from permission-target-create ptc' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from permission-target-create ptc' -f -l vars -r -d '[Optional] List of variables in the form of "key1=value1;key2=value2;..." to be replaced in the template. In the template, the variables should be used as follows: ${key1}.` `'
complete -c jf -n '__fish_seen_subcommand_from permission-target-delete ptdel' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'permission-target-delete ptdel' -d 'Permanently delete a permission target.'
complete -c jf -n '__fish_seen_subcommand_from permission-target-delete ptdel' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from permission-target-delete ptdel' -f -l client-cert-key-path -r -d '[Optional] Private key file for the client certificate in PEM format.` `'
complete -c jf -n '__fish_seen_subcommand_from permission-target-delete ptdel' -f -l client-cert-path -r -d '[Optional] Client certificate file in PEM format.` `'
complete -c jf -n '__fish_seen_subcommand_from permission-target-delete ptdel' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from permission-target-delete ptdel' -f -l quiet -d '[Default: $CI] Set to true to skip the delete confirmation message.` `'
complete -c jf -n '__fish_seen_subcommand_from permission-target-delete ptdel' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from permission-target-delete ptdel' -f -l ssh-key-path -r -d '[Optional] SSH key file path.` `'
complete -c jf -n '__fish_seen_subcommand_from permission-target-delete ptdel' -f -l ssh-passphrase -r -d '[Optional] SSH key passphrase.` `'
complete -c jf -n '__fish_seen_subcommand_from permission-target-delete ptdel' -f -l url -r -d '[Optional] JFrog Artifactory URL.` `'
complete -c jf -n '__fish_seen_subcommand_from permission-target-delete ptdel' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from permission-target-template ptt' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'permission-target-template ptt' -d 'Create a JSON template for a permission target creation or replacement.'
complete -c jf -n '__fish_seen_subcommand_from permission-target-update ptu' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'permission-target-update ptu' -d 'Update a permission target in the JFrog Platform.'
complete -c jf -n '__fish_seen_subcommand_from permission-target-update ptu' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from permission-target-update ptu' -f -l client-cert-key-path -r -d '[Optional] Private key file for the client certificate in PEM format.` `'
complete -c jf -n '__fish_seen_subcommand_from permission-target-update ptu' -f -l client-cert-path -r -d '[Optional] Client certificate file in PEM format.` `'
complete -c jf -n '__fish_seen_subcommand_from permission-target-update ptu' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from permission-target-update ptu' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from permission-target-update ptu' -f -l ssh-key-path -r -d '[Optional] SSH key file path.` `'
complete -c jf -n '__fish_seen_subcommand_from permission-target-update ptu' -f -l ssh-passphrase -r -d '[Optional] SSH key passphrase.` `'
complete -c jf -n '__fish_seen_subcommand_from permission-target-update ptu' -f -l url -r -d '[Optional] JFrog Artifactory URL.` `'
complete -c jf -n '__fish_seen_subcommand_from permission-target-update ptu' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from permission-target-update ptu' -f -l vars -r -d '[Optional] List of variables in the form of "key1=value1;key2=value2;..." to be replaced in the template. In the template, the variables should be used as follows: ${key1}.` `'
complete -c jf -n '__fish_seen_subcommand_from ping p' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'ping p' -d 'Send applicative ping to Artifactory'
complete -c jf -n '__fish_seen_subcommand_from ping p' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from ping p' -f -l client-cert-key-path -r -d '[Optional] Private key file for the client certificate in PEM format.` `'
complete -c jf -n '__fish_seen_subcommand_from ping p' -f -l client-cert-path -r -d '[Optional] Client certificate file in PEM format.` `'
complete -c jf -n '__fish_seen_subcommand_from ping p' -f -l insecure-tls -d '[Default: false] Set to true to skip TLS certificates verification.` `'
complete -c jf -n '__fish_seen_subcommand_from ping p' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from ping p' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from ping p' -f -l ssh-key-path -r -d '[Optional] SSH key file path.` `'
complete -c jf -n '__fish_seen_subcommand_from ping p' -f -l ssh-passphrase -r -d '[Optional] SSH key passphrase.` `'
complete -c jf -n '__fish_seen_subcommand_from ping p' -f -l url -r -d '[Optional] JFrog Artifactory URL.` `'
complete -c jf -n '__fish_seen_subcommand_from ping p' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from pip-config pipc' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'pip-config pipc' -d 'Generate pip build configuration.'
complete -c jf -n '__fish_seen_subcommand_from pip-config pipc' -f -l global -d '[Default: false] Set to true if you\'d like the configuration to be global (for all projects). Specific projects can override the global configuration.` `'
complete -c jf -n '__fish_seen_subcommand_from pip-config pipc' -f -l repo-resolve -r -d '[Optional] Repository for dependencies resolution.` `'
complete -c jf -n '__fish_seen_subcommand_from pip-config pipc' -f -l server-id-resolve -r -d '[Optional] Artifactory server ID for resolution. The server should configured using the \'jfrog c add\' command.` `'
complete -c jf -n '__fish_seen_subcommand_from pip-install pipi' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'pip-install pipi' -d 'Run pip install.'
complete -c jf -n '__fish_seen_subcommand_from pip-install pipi' -f -l build-name -r -d '[Optional] Providing this option will collect and record build info for this build name. Build number option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from pip-install pipi' -f -l build-number -r -d '[Optional] Providing this option will collect and record build info for this build number. Build name option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from pip-install pipi' -f -l module -r -d '[Optional] Optional module name for the build-info. Build name and number options are mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from pip-install pipi' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from podman-pull ppl' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'podman-pull ppl' -d 'Podman pull.'
complete -c jf -n '__fish_seen_subcommand_from podman-pull ppl' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from podman-pull ppl' -f -l build-name -r -d '[Optional] Providing this option will collect and record build info for this build name. Build number option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from podman-pull ppl' -f -l build-number -r -d '[Optional] Providing this option will collect and record build info for this build number. Build name option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from podman-pull ppl' -f -l module -r -d '[Optional] Optional module name for the build-info. Build name and number options are mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from podman-pull ppl' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from podman-pull ppl' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from podman-pull ppl' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from podman-pull ppl' -f -l skip-login -d '[Default: false] Set to true if you\'d like the command to skip performing docker login.` `'
complete -c jf -n '__fish_seen_subcommand_from podman-pull ppl' -f -l ssh-key-path -r -d '[Optional] SSH key file path.` `'
complete -c jf -n '__fish_seen_subcommand_from podman-pull ppl' -f -l ssh-passphrase -r -d '[Optional] SSH key passphrase.` `'
complete -c jf -n '__fish_seen_subcommand_from podman-pull ppl' -f -l url -r -d '[Optional] JFrog Artifactory URL.` `'
complete -c jf -n '__fish_seen_subcommand_from podman-pull ppl' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from podman-push pp' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'podman-push pp' -d 'Podman push.'
complete -c jf -n '__fish_seen_subcommand_from podman-push pp' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from podman-push pp' -f -l build-name -r -d '[Optional] Providing this option will collect and record build info for this build name. Build number option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from podman-push pp' -f -l build-number -r -d '[Optional] Providing this option will collect and record build info for this build number. Build name option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from podman-push pp' -f -l detailed-summary -d '[Default: false] Set to true to include a list of the affected files in the command summary.` `'
complete -c jf -n '__fish_seen_subcommand_from podman-push pp' -f -l module -r -d '[Optional] Optional module name for the build-info. Build name and number options are mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from podman-push pp' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from podman-push pp' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from podman-push pp' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from podman-push pp' -f -l skip-login -d '[Default: false] Set to true if you\'d like the command to skip performing docker login.` `'
complete -c jf -n '__fish_seen_subcommand_from podman-push pp' -f -l ssh-key-path -r -d '[Optional] SSH key file path.` `'
complete -c jf -n '__fish_seen_subcommand_from podman-push pp' -f -l ssh-passphrase -r -d '[Optional] SSH key passphrase.` `'
complete -c jf -n '__fish_seen_subcommand_from podman-push pp' -f -l threads -r -d '[Default: 3] Number of working threads.` `'
complete -c jf -n '__fish_seen_subcommand_from podman-push pp' -f -l url -r -d '[Optional] JFrog Artifactory URL.` `'
complete -c jf -n '__fish_seen_subcommand_from podman-push pp' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from replication-create rplc' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'replication-create rplc' -d 'Create a new replication in Artifactory.'
complete -c jf -n '__fish_seen_subcommand_from replication-create rplc' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from replication-create rplc' -f -l client-cert-key-path -r -d '[Optional] Private key file for the client certificate in PEM format.` `'
complete -c jf -n '__fish_seen_subcommand_from replication-create rplc' -f -l client-cert-path -r -d '[Optional] Client certificate file in PEM format.` `'
complete -c jf -n '__fish_seen_subcommand_from replication-create rplc' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from replication-create rplc' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from replication-create rplc' -f -l ssh-key-path -r -d '[Optional] SSH key file path.` `'
complete -c jf -n '__fish_seen_subcommand_from replication-create rplc' -f -l ssh-passphrase -r -d '[Optional] SSH key passphrase.` `'
complete -c jf -n '__fish_seen_subcommand_from replication-create rplc' -f -l url -r -d '[Optional] JFrog Artifactory URL.` `'
complete -c jf -n '__fish_seen_subcommand_from replication-create rplc' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from replication-create rplc' -f -l vars -r -d '[Optional] List of variables in the form of "key1=value1;key2=value2;..." to be replaced in the template. In the template, the variables should be used as follows: ${key1}.` `'
complete -c jf -n '__fish_seen_subcommand_from replication-delete rpldel' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'replication-delete rpldel' -d 'Remove a replication repository from Artifactory.'
complete -c jf -n '__fish_seen_subcommand_from replication-delete rpldel' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from replication-delete rpldel' -f -l client-cert-key-path -r -d '[Optional] Private key file for the client certificate in PEM format.` `'
complete -c jf -n '__fish_seen_subcommand_from replication-delete rpldel' -f -l client-cert-path -r -d '[Optional] Client certificate file in PEM format.` `'
complete -c jf -n '__fish_seen_subcommand_from replication-delete rpldel' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from replication-delete rpldel' -f -l quiet -d '[Default: $CI] Set to true to skip the delete confirmation message.` `'
complete -c jf -n '__fish_seen_subcommand_from replication-delete rpldel' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from replication-delete rpldel' -f -l ssh-key-path -r -d '[Optional] SSH key file path.` `'
complete -c jf -n '__fish_seen_subcommand_from replication-delete rpldel' -f -l ssh-passphrase -r -d '[Optional] SSH key passphrase.` `'
complete -c jf -n '__fish_seen_subcommand_from replication-delete rpldel' -f -l url -r -d '[Optional] JFrog Artifactory URL.` `'
complete -c jf -n '__fish_seen_subcommand_from replication-delete rpldel' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from replication-template rplt' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'replication-template rplt' -d 'Create a JSON template for creation replication repository.'
complete -c jf -n '__fish_seen_subcommand_from replication-template rplt' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from replication-template rplt' -f -l client-cert-key-path -r -d '[Optional] Private key file for the client certificate in PEM format.` `'
complete -c jf -n '__fish_seen_subcommand_from replication-template rplt' -f -l client-cert-path -r -d '[Optional] Client certificate file in PEM format.` `'
complete -c jf -n '__fish_seen_subcommand_from replication-template rplt' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from replication-template rplt' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from replication-template rplt' -f -l ssh-key-path -r -d '[Optional] SSH key file path.` `'
complete -c jf -n '__fish_seen_subcommand_from replication-template rplt' -f -l ssh-passphrase -r -d '[Optional] SSH key passphrase.` `'
complete -c jf -n '__fish_seen_subcommand_from replication-template rplt' -f -l url -r -d '[Optional] JFrog Artifactory URL.` `'
complete -c jf -n '__fish_seen_subcommand_from replication-template rplt' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from replication-template rplt' -f -l vars -r -d '[Optional] List of variables in the form of "key1=value1;key2=value2;..." to be replaced in the template. In the template, the variables should be used as follows: ${key1}.` `'
complete -c jf -n '__fish_seen_subcommand_from repo-create rc' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'repo-create rc' -d 'Create a new repository in Artifactory.'
complete -c jf -n '__fish_seen_subcommand_from repo-create rc' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from repo-create rc' -f -l client-cert-key-path -r -d '[Optional] Private key file for the client certificate in PEM format.` `'
complete -c jf -n '__fish_seen_subcommand_from repo-create rc' -f -l client-cert-path -r -d '[Optional] Client certificate file in PEM format.` `'
complete -c jf -n '__fish_seen_subcommand_from repo-create rc' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from repo-create rc' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from repo-create rc' -f -l ssh-key-path -r -d '[Optional] SSH key file path.` `'
complete -c jf -n '__fish_seen_subcommand_from repo-create rc' -f -l ssh-passphrase -r -d '[Optional] SSH key passphrase.` `'
complete -c jf -n '__fish_seen_subcommand_from repo-create rc' -f -l url -r -d '[Optional] JFrog Artifactory URL.` `'
complete -c jf -n '__fish_seen_subcommand_from repo-create rc' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from repo-create rc' -f -l vars -r -d '[Optional] List of variables in the form of "key1=value1;key2=value2;..." to be replaced in the template. In the template, the variables should be used as follows: ${key1}.` `'
complete -c jf -n '__fish_seen_subcommand_from repo-delete rdel' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'repo-delete rdel' -d 'Permanently delete repositories with all of their content from Artifactory.'
complete -c jf -n '__fish_seen_subcommand_from repo-delete rdel' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from repo-delete rdel' -f -l client-cert-key-path -r -d '[Optional] Private key file for the client certificate in PEM format.` `'
complete -c jf -n '__fish_seen_subcommand_from repo-delete rdel' -f -l client-cert-path -r -d '[Optional] Client certificate file in PEM format.` `'
complete -c jf -n '__fish_seen_subcommand_from repo-delete rdel' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from repo-delete rdel' -f -l quiet -d '[Default: $CI] Set to true to skip the delete confirmation message.` `'
complete -c jf -n '__fish_seen_subcommand_from repo-delete rdel' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from repo-delete rdel' -f -l ssh-key-path -r -d '[Optional] SSH key file path.` `'
complete -c jf -n '__fish_seen_subcommand_from repo-delete rdel' -f -l ssh-passphrase -r -d '[Optional] SSH key passphrase.` `'
complete -c jf -n '__fish_seen_subcommand_from repo-delete rdel' -f -l url -r -d '[Optional] JFrog Artifactory URL.` `'
complete -c jf -n '__fish_seen_subcommand_from repo-delete rdel' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from repo-template rpt' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'repo-template rpt' -d 'Create a JSON template for repository creation or update.'
complete -c jf -n '__fish_seen_subcommand_from repo-update ru' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'repo-update ru' -d 'Update an exiting repository configuration in Artifactory.'
complete -c jf -n '__fish_seen_subcommand_from repo-update ru' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from repo-update ru' -f -l client-cert-key-path -r -d '[Optional] Private key file for the client certificate in PEM format.` `'
complete -c jf -n '__fish_seen_subcommand_from repo-update ru' -f -l client-cert-path -r -d '[Optional] Client certificate file in PEM format.` `'
complete -c jf -n '__fish_seen_subcommand_from repo-update ru' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from repo-update ru' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from repo-update ru' -f -l ssh-key-path -r -d '[Optional] SSH key file path.` `'
complete -c jf -n '__fish_seen_subcommand_from repo-update ru' -f -l ssh-passphrase -r -d '[Optional] SSH key passphrase.` `'
complete -c jf -n '__fish_seen_subcommand_from repo-update ru' -f -l url -r -d '[Optional] JFrog Artifactory URL.` `'
complete -c jf -n '__fish_seen_subcommand_from repo-update ru' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from repo-update ru' -f -l vars -r -d '[Optional] List of variables in the form of "key1=value1;key2=value2;..." to be replaced in the template. In the template, the variables should be used as follows: ${key1}.` `'
complete -c jf -n '__fish_seen_subcommand_from search s' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'search s' -d 'Search files.'
complete -c jf -n '__fish_seen_subcommand_from search s' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from search s' -f -l archive-entries -r -d '[Optional] If specified, only archive artifacts containing entries matching this pattern are matched. You can use wildcards to specify multiple artifacts.` `'
complete -c jf -n '__fish_seen_subcommand_from search s' -f -l build -r -d '[Optional] If specified, only artifacts of the specified build are matched. The property format is build-name/build-number. If you do not specify the build number, the artifacts are filtered by the latest build number.` `'
complete -c jf -n '__fish_seen_subcommand_from search s' -f -l bundle -r -d '[Optional] If specified, only artifacts of the specified bundle are matched. The value format is bundle-name/bundle-version.` `'
complete -c jf -n '__fish_seen_subcommand_from search s' -f -l client-cert-key-path -r -d '[Optional] Private key file for the client certificate in PEM format.` `'
complete -c jf -n '__fish_seen_subcommand_from search s' -f -l client-cert-path -r -d '[Optional] Client certificate file in PEM format.` `'
complete -c jf -n '__fish_seen_subcommand_from search s' -f -l count -d '[Optional] Set to true to display only the total of files or folders found.` `'
complete -c jf -n '__fish_seen_subcommand_from search s' -f -l exclude-artifacts -r -d '[Default: false] If specified, build artifacts are not matched. Used together with the --build flag.` `'
complete -c jf -n '__fish_seen_subcommand_from search s' -f -l exclude-props -r -d '[Optional] List of properties in the form of "key1=value1;key2=value2,...". Only artifacts without the specified properties will be returned` `'
complete -c jf -n '__fish_seen_subcommand_from search s' -f -l exclusions -r -d '[Optional] Semicolon-separated list of exclusions. Exclusions can include the * and the ? wildcards.` `'
complete -c jf -n '__fish_seen_subcommand_from search s' -f -l fail-no-op -d '[Default: false] Set to true if you\'d like the command to return exit code 2 in case of no files are affected.` `'
complete -c jf -n '__fish_seen_subcommand_from search s' -f -l include-deps -r -d '[Default: false] If specified, also dependencies of the specified build are matched. Used together with the --build flag.` `'
complete -c jf -n '__fish_seen_subcommand_from search s' -f -l include-dirs -d '[Default: false] Set to true if you\'d like to also apply the source path pattern for directories and not just for files.` `'
complete -c jf -n '__fish_seen_subcommand_from search s' -f -l insecure-tls -d '[Default: false] Set to true to skip TLS certificates verification.` `'
complete -c jf -n '__fish_seen_subcommand_from search s' -f -l limit -r -d '[Optional] The maximum number of items to fetch. Usually used with the \'sort-by\' option.` `'
complete -c jf -n '__fish_seen_subcommand_from search s' -f -l offset -r -d '[Optional] The offset from which to fetch items (i.e. how many items should be skipped). Usually used with the \'sort-by\' option.` `'
complete -c jf -n '__fish_seen_subcommand_from search s' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from search s' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from search s' -f -l props -r -d '[Optional] List of properties in the form of "key1=value1;key2=value2,...". Only artifacts with these properties will be returned.` `'
complete -c jf -n '__fish_seen_subcommand_from search s' -f -l recursive -d '[Default: true] Set to false if you do not wish to search artifacts inside sub-folders in Artifactory.` `'
complete -c jf -n '__fish_seen_subcommand_from search s' -f -l retries -r -d '[Default: 3] Number of HTTP retries.` `'
complete -c jf -n '__fish_seen_subcommand_from search s' -f -l retry-wait-time -r -d '[Default: 0] Number of seconds or milliseconds to wait between retries. The numeric value should either end with s for seconds or ms for milliseconds.` `'
complete -c jf -n '__fish_seen_subcommand_from search s' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from search s' -f -l sort-by -r -d '[Optional] A list of semicolon-separated fields to sort by. The fields must be part of the \'items\' AQL domain. For more information, see https://www.jfrog.com/confluence/display/RTF/Artifactory+Query+Language#ArtifactoryQueryLanguage-EntitiesandFields` `'
complete -c jf -n '__fish_seen_subcommand_from search s' -f -l sort-order -r -d '[Default: asc] The order by which fields in the \'sort-by\' option should be sorted. Accepts \'asc\' or \'desc\'.` `'
complete -c jf -n '__fish_seen_subcommand_from search s' -f -l spec -r -d '[Optional] Path to a File Spec.` `'
complete -c jf -n '__fish_seen_subcommand_from search s' -f -l spec-vars -r -d '[Optional] List of variables in the form of "key1=value1;key2=value2;..." to be replaced in the File Spec. In the File Spec, the variables should be used as follows: ${key1}.` `'
complete -c jf -n '__fish_seen_subcommand_from search s' -f -l ssh-key-path -r -d '[Optional] SSH key file path.` `'
complete -c jf -n '__fish_seen_subcommand_from search s' -f -l ssh-passphrase -r -d '[Optional] SSH key passphrase.` `'
complete -c jf -n '__fish_seen_subcommand_from search s' -f -l transitive -d '[Default: false] Set to true to look for artifacts also in remote repositories. The search will run on the first five remote repositories within the virtual repository. Available on Artifactory version 7.17.0 or higher.` `'
complete -c jf -n '__fish_seen_subcommand_from search s' -f -l url -r -d '[Optional] JFrog Artifactory URL.` `'
complete -c jf -n '__fish_seen_subcommand_from search s' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from set-props sp' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'set-props sp' -d 'Set properties on existing files in Artifactory.'
complete -c jf -n '__fish_seen_subcommand_from set-props sp' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from set-props sp' -f -l archive-entries -r -d '[Optional] If specified, only archive artifacts containing entries matching this pattern are matched. You can use wildcards to specify multiple artifacts.` `'
complete -c jf -n '__fish_seen_subcommand_from set-props sp' -f -l build -r -d '[Optional] If specified, only artifacts of the specified build are matched. The property format is build-name/build-number. If you do not specify the build number, the artifacts are filtered by the latest build number.` `'
complete -c jf -n '__fish_seen_subcommand_from set-props sp' -f -l bundle -r -d '[Optional] If specified, only artifacts of the specified bundle are matched. The value format is bundle-name/bundle-version.` `'
complete -c jf -n '__fish_seen_subcommand_from set-props sp' -f -l client-cert-key-path -r -d '[Optional] Private key file for the client certificate in PEM format.` `'
complete -c jf -n '__fish_seen_subcommand_from set-props sp' -f -l client-cert-path -r -d '[Optional] Client certificate file in PEM format.` `'
complete -c jf -n '__fish_seen_subcommand_from set-props sp' -f -l exclude-artifacts -r -d '[Default: false] If specified, build artifacts are not matched. Used together with the --build flag.` `'
complete -c jf -n '__fish_seen_subcommand_from set-props sp' -f -l exclude-props -r -d '[Optional] List of properties in the form of "key1=value1;key2=value2,...". Only artifacts without the specified properties are affected` `'
complete -c jf -n '__fish_seen_subcommand_from set-props sp' -f -l exclusions -r -d '[Optional] Semicolon-separated list of exclusions. Exclusions can include the * and the ? wildcards.` `'
complete -c jf -n '__fish_seen_subcommand_from set-props sp' -f -l fail-no-op -d '[Default: false] Set to true if you\'d like the command to return exit code 2 in case of no files are affected.` `'
complete -c jf -n '__fish_seen_subcommand_from set-props sp' -f -l include-deps -r -d '[Default: false] If specified, also dependencies of the specified build are matched. Used together with the --build flag.` `'
complete -c jf -n '__fish_seen_subcommand_from set-props sp' -f -l include-dirs -d '[Default: false] Set to true if you\'d like to also apply the source path pattern for directories and not just for files.` `'
complete -c jf -n '__fish_seen_subcommand_from set-props sp' -f -l insecure-tls -d '[Default: false] Set to true to skip TLS certificates verification.` `'
complete -c jf -n '__fish_seen_subcommand_from set-props sp' -f -l limit -r -d '[Optional] The maximum number of items to fetch. Usually used with the \'sort-by\' option.` `'
complete -c jf -n '__fish_seen_subcommand_from set-props sp' -f -l offset -r -d '[Optional] The offset from which to fetch items (i.e. how many items should be skipped). Usually used with the \'sort-by\' option.` `'
complete -c jf -n '__fish_seen_subcommand_from set-props sp' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from set-props sp' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from set-props sp' -f -l props -r -d '[Optional] List of properties in the form of "key1=value1;key2=value2,...". Only artifacts with these properties are affected.` `'
complete -c jf -n '__fish_seen_subcommand_from set-props sp' -f -l recursive -d '[Default: true] When false, artifacts inside sub-folders in Artifactory will not be affected.` `'
complete -c jf -n '__fish_seen_subcommand_from set-props sp' -f -l retries -r -d '[Default: 3] Number of HTTP retries.` `'
complete -c jf -n '__fish_seen_subcommand_from set-props sp' -f -l retry-wait-time -r -d '[Default: 0] Number of seconds or milliseconds to wait between retries. The numeric value should either end with s for seconds or ms for milliseconds.` `'
complete -c jf -n '__fish_seen_subcommand_from set-props sp' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from set-props sp' -f -l sort-by -r -d '[Optional] A list of semicolon-separated fields to sort by. The fields must be part of the \'items\' AQL domain. For more information, see https://www.jfrog.com/confluence/display/RTF/Artifactory+Query+Language#ArtifactoryQueryLanguage-EntitiesandFields` `'
complete -c jf -n '__fish_seen_subcommand_from set-props sp' -f -l sort-order -r -d '[Default: asc] The order by which fields in the \'sort-by\' option should be sorted. Accepts \'asc\' or \'desc\'.` `'
complete -c jf -n '__fish_seen_subcommand_from set-props sp' -f -l spec -r -d '[Optional] Path to a File Spec.` `'
complete -c jf -n '__fish_seen_subcommand_from set-props sp' -f -l spec-vars -r -d '[Optional] List of variables in the form of "key1=value1;key2=value2;..." to be replaced in the File Spec. In the File Spec, the variables should be used as follows: ${key1}.` `'
complete -c jf -n '__fish_seen_subcommand_from set-props sp' -f -l ssh-key-path -r -d '[Optional] SSH key file path.` `'
complete -c jf -n '__fish_seen_subcommand_from set-props sp' -f -l ssh-passphrase -r -d '[Optional] SSH key passphrase.` `'
complete -c jf -n '__fish_seen_subcommand_from set-props sp' -f -l threads -r -d '[Default: 3] Number of working threads.` `'
complete -c jf -n '__fish_seen_subcommand_from set-props sp' -f -l url -r -d '[Optional] JFrog Artifactory URL.` `'
complete -c jf -n '__fish_seen_subcommand_from set-props sp' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from transfer-config' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'transfer-config' -d 'Copy full Artifactory configuration from source Artifactory server to target Artifactory server. Warning - This action will wipe all Artifactory content in this target server.'
complete -c jf -n '__fish_seen_subcommand_from transfer-config' -f -l exclude-repos -r -d '[Optional] A list of semicolon separated repositories to exclude from the transfer. You can use wildcards to specify patterns for the repositories\' names.` `'
complete -c jf -n '__fish_seen_subcommand_from transfer-config' -f -l force -d '[Default: false] Set to true to allow config transfer to a non-empty Artifactory server.` `'
complete -c jf -n '__fish_seen_subcommand_from transfer-config' -f -l include-repos -r -d '[Optional] A list of semicolon separated repositories to include in the transfer. You can use wildcards to specify patterns for the repositories\' names.` `'
complete -c jf -n '__fish_seen_subcommand_from transfer-config' -f -l verbose -d '[Default: false] Set to true to increase verbosity during the export configuration from the source Artifactory phase.` `'
complete -c jf -n '__fish_seen_subcommand_from transfer-files' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'transfer-files' -d 'Transfer files from one Artifactory to another.'
complete -c jf -n '__fish_seen_subcommand_from transfer-files' -f -l exclude-repos -r -d '[Optional] A list of semicolon separated repositories to exclude from the transfer. You can use wildcards to specify patterns for the repositories\' names.` `'
complete -c jf -n '__fish_seen_subcommand_from transfer-files' -f -l filestore -d '[Default: false] Set to true to make the transfer mechanism check for the existence of artifacts on the target filestore. Used when the files are already expected to be located on the filestore.` `'
complete -c jf -n '__fish_seen_subcommand_from transfer-files' -f -l ignore-state -d '[Default: false] Set to true to ignore the saved state from previous transfer-files operations.` `'
complete -c jf -n '__fish_seen_subcommand_from transfer-files' -f -l include-repos -r -d '[Optional] A list of semicolon separated repositories to include in the transfer. You can use wildcards to specify patterns for the repositories\' names.` `'
complete -c jf -n '__fish_seen_subcommand_from transfer-files' -f -l proxy-key -r -d '[Optional] The key of an HTTP proxy configuration in Artifactory. This proxy will be used for the transfer traffic between the source and target instances. To configure this proxy, go to "Proxies | Configuration | Proxy Configuration" in the JFrog Administration UI.` `'
complete -c jf -n '__fish_seen_subcommand_from transfer-files' -f -l status -d '[Default: false] Set to true to show the status of the transfer-files command currently in progress.` `'
complete -c jf -n '__fish_seen_subcommand_from transfer-settings' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'transfer-settings' -d 'Configure the settings for the \'jf rt transfer-files\' command.'
complete -c jf -n '__fish_seen_subcommand_from upload u' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'upload u' -d 'Upload files.'
complete -c jf -n '__fish_seen_subcommand_from upload u' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from upload u' -f -l ant -d '[Default: false] Set to true to use an ant pattern instead of wildcards expression to collect files to upload.` `'
complete -c jf -n '__fish_seen_subcommand_from upload u' -f -l archive -r -d '[Optional] Set to "zip" to deploy the files to Artifactory in a ZIP archive.` `'
complete -c jf -n '__fish_seen_subcommand_from upload u' -f -l build-name -r -d '[Optional] Providing this option will collect and record build info for this build name. Build number option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from upload u' -f -l build-number -r -d '[Optional] Providing this option will collect and record build info for this build number. Build name option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from upload u' -f -l client-cert-key-path -r -d '[Optional] Private key file for the client certificate in PEM format.` `'
complete -c jf -n '__fish_seen_subcommand_from upload u' -f -l client-cert-path -r -d '[Optional] Client certificate file in PEM format.` `'
complete -c jf -n '__fish_seen_subcommand_from upload u' -f -l deb -r -d '[Optional] Used for Debian packages in the form of distribution/component/architecture. If the value for distribution, component or architecture includes a slash, the slash should be escaped with a back-slash.` `'
complete -c jf -n '__fish_seen_subcommand_from upload u' -f -l detailed-summary -d '[Default: false] Set to true to include a list of the affected files in the command summary.` `'
complete -c jf -n '__fish_seen_subcommand_from upload u' -f -l dry-run -d '[Default: false] Set to true to disable communication with Artifactory.` `'
complete -c jf -n '__fish_seen_subcommand_from upload u' -f -l exclusions -r -d '[Optional] Semicolon-separated list of exclude patterns. Exclude patterns may contain the * and the ? wildcards or a regex pattern, according to the value of the \'regexp\' option.` `'
complete -c jf -n '__fish_seen_subcommand_from upload u' -f -l explode -d '[Default: false] Set to true to extract an archive after it is deployed to Artifactory.` `'
complete -c jf -n '__fish_seen_subcommand_from upload u' -f -l fail-no-op -d '[Default: false] Set to true if you\'d like the command to return exit code 2 in case of no files are affected.` `'
complete -c jf -n '__fish_seen_subcommand_from upload u' -f -l flat -d '[Default: false] If set to false, files are uploaded according to their file system hierarchy.` `'
complete -c jf -n '__fish_seen_subcommand_from upload u' -f -l include-dirs -d '[Default: false] Set to true if you\'d like to also apply the source path pattern for directories and not just for files.` `'
complete -c jf -n '__fish_seen_subcommand_from upload u' -f -l insecure-tls -d '[Default: false] Set to true to skip TLS certificates verification.` `'
complete -c jf -n '__fish_seen_subcommand_from upload u' -f -l module -r -d '[Optional] Optional module name for the build-info. Build name and number options are mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from upload u' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from upload u' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from upload u' -f -l quiet -d '[Default: $CI] Set to true to skip the sync-deletes confirmation message.` `'
complete -c jf -n '__fish_seen_subcommand_from upload u' -f -l recursive -d '[Default: true] Set to false if you do not wish to collect artifacts in sub-folders to be uploaded to Artifactory.` `'
complete -c jf -n '__fish_seen_subcommand_from upload u' -f -l regexp -d '[Default: false] Set to true to use a regular expression instead of wildcards expression to collect files to upload.` `'
complete -c jf -n '__fish_seen_subcommand_from upload u' -f -l retries -r -d '[Default: 3] Number of HTTP retries.` `'
complete -c jf -n '__fish_seen_subcommand_from upload u' -f -l retry-wait-time -r -d '[Default: 0] Number of seconds or milliseconds to wait between retries. The numeric value should either end with s for seconds or ms for milliseconds.` `'
complete -c jf -n '__fish_seen_subcommand_from upload u' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from upload u' -f -l spec -r -d '[Optional] Path to a File Spec.` `'
complete -c jf -n '__fish_seen_subcommand_from upload u' -f -l spec-vars -r -d '[Optional] List of variables in the form of "key1=value1;key2=value2;..." to be replaced in the File Spec. In the File Spec, the variables should be used as follows: ${key1}.` `'
complete -c jf -n '__fish_seen_subcommand_from upload u' -f -l ssh-key-path -r -d '[Optional] SSH key file path.` `'
complete -c jf -n '__fish_seen_subcommand_from upload u' -f -l ssh-passphrase -r -d '[Optional] SSH key passphrase.` `'
complete -c jf -n '__fish_seen_subcommand_from upload u' -f -l symlinks -d '[Default: false] Set to true to preserve symbolic links structure in Artifactory.` `'
complete -c jf -n '__fish_seen_subcommand_from upload u' -f -l sync-deletes -r -d '[Optional] Specific path in Artifactory, under which to sync artifacts after the upload. After the upload, this path will include only the artifacts uploaded during this upload operation. The other files under this path will be deleted.` `'
complete -c jf -n '__fish_seen_subcommand_from upload u' -f -l target-props -r -d '[Optional] List of properties in the form of "key1=value1;key2=value2,...". Those properties will be attached to the uploaded artifacts.` `'
complete -c jf -n '__fish_seen_subcommand_from upload u' -f -l threads -r -d '[Default: 3] Number of working threads.` `'
complete -c jf -n '__fish_seen_subcommand_from upload u' -f -l url -r -d '[Optional] JFrog Artifactory URL.` `'
complete -c jf -n '__fish_seen_subcommand_from upload u' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from user-create' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'user-create' -d 'Create new user.'
complete -c jf -n '__fish_seen_subcommand_from user-create' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from user-create' -f -l admin -d '[Default: false] Set to true if you\'d like to create an admin user.` `'
complete -c jf -n '__fish_seen_subcommand_from user-create' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from user-create' -f -l replace -d '[Default: false] Set to true if you\'d like existing users or groups to be replaced.` `'
complete -c jf -n '__fish_seen_subcommand_from user-create' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from user-create' -f -l ssh-key-path -r -d '[Optional] SSH key file path.` `'
complete -c jf -n '__fish_seen_subcommand_from user-create' -f -l ssh-passphrase -r -d '[Optional] SSH key passphrase.` `'
complete -c jf -n '__fish_seen_subcommand_from user-create' -f -l url -r -d '[Optional] JFrog Artifactory URL.` `'
complete -c jf -n '__fish_seen_subcommand_from user-create' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from user-create' -f -l users-groups -r -d '[Optional] A list of comma-separated groups for the new users to be associated with.` `'
complete -c jf -n '__fish_seen_subcommand_from users-create uc' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'users-create uc' -d 'Create new users.'
complete -c jf -n '__fish_seen_subcommand_from users-create uc' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from users-create uc' -f -l csv -r -d '[Mandatory] Path to a csv file with the users\' details. The first row of the file is reserved for the cells\' headers. It must include "username","password","email"` `'
complete -c jf -n '__fish_seen_subcommand_from users-create uc' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from users-create uc' -f -l replace -d '[Default: false] Set to true if you\'d like existing users or groups to be replaced.` `'
complete -c jf -n '__fish_seen_subcommand_from users-create uc' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from users-create uc' -f -l ssh-key-path -r -d '[Optional] SSH key file path.` `'
complete -c jf -n '__fish_seen_subcommand_from users-create uc' -f -l ssh-passphrase -r -d '[Optional] SSH key passphrase.` `'
complete -c jf -n '__fish_seen_subcommand_from users-create uc' -f -l url -r -d '[Optional] JFrog Artifactory URL.` `'
complete -c jf -n '__fish_seen_subcommand_from users-create uc' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from users-create uc' -f -l users-groups -r -d '[Optional] A list of comma-separated groups for the new users to be associated with.` `'
complete -c jf -n '__fish_seen_subcommand_from users-delete udel' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'users-delete udel' -d 'Delete users.'
complete -c jf -n '__fish_seen_subcommand_from users-delete udel' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from users-delete udel' -f -l csv -r -d '[Optional] Path to a csv file with the users\' details. The first row of the file is reserved for the cells\' headers. It must include "username"` `'
complete -c jf -n '__fish_seen_subcommand_from users-delete udel' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from users-delete udel' -f -l quiet -d '[Default: $CI] Set to true to skip the delete confirmation message.` `'
complete -c jf -n '__fish_seen_subcommand_from users-delete udel' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from users-delete udel' -f -l ssh-key-path -r -d '[Optional] SSH key file path.` `'
complete -c jf -n '__fish_seen_subcommand_from users-delete udel' -f -l ssh-passphrase -r -d '[Optional] SSH key passphrase.` `'
complete -c jf -n '__fish_seen_subcommand_from users-delete udel' -f -l url -r -d '[Optional] JFrog Artifactory URL.` `'
complete -c jf -n '__fish_seen_subcommand_from users-delete udel' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from yarn' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'yarn' -d 'Run Yarn commands.'
complete -c jf -n '__fish_seen_subcommand_from yarn' -f -l build-name -r -d '[Optional] Providing this option will collect and record build info for this build name. Build number option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from yarn' -f -l build-number -r -d '[Optional] Providing this option will collect and record build info for this build number. Build name option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from yarn' -f -l module -r -d '[Optional] Optional module name for the build-info. Build name and number options are mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from yarn' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from yarn-config yarnc' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from rt' -a 'yarn-config yarnc' -d 'Generate Yarn configuration.'
complete -c jf -n '__fish_seen_subcommand_from yarn-config yarnc' -f -l global -d '[Default: false] Set to true if you\'d like the configuration to be global (for all projects). Specific projects can override the global configuration.` `'
complete -c jf -n '__fish_seen_subcommand_from yarn-config yarnc' -f -l repo-resolve -r -d '[Optional] Repository for dependencies resolution.` `'
complete -c jf -n '__fish_seen_subcommand_from yarn-config yarnc' -f -l server-id-resolve -r -d '[Optional] Artifactory server ID for resolution. The server should configured using the \'jfrog c add\' command.` `'
complete -c jf -n '__fish_seen_subcommand_from mc' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_jf_no_subcommand' -a 'mc' -d 'Mission Control commands.'
complete -c jf -n '__fish_seen_subcommand_from jpd-add ja' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from mc' -a 'jpd-add ja' -d 'Add a JPD to Mission Control.'
complete -c jf -n '__fish_seen_subcommand_from jpd-add ja' -f -l access-token -r -d '[Optional] Mission Control Admin token.` `'
complete -c jf -n '__fish_seen_subcommand_from jpd-add ja' -f -l url -r -d '[Optional] JFrog Mission Control URL.` `'
complete -c jf -n '__fish_seen_subcommand_from jpd-delete jd' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from mc' -a 'jpd-delete jd' -d 'Delete a JPD from Mission Control.'
complete -c jf -n '__fish_seen_subcommand_from jpd-delete jd' -f -l access-token -r -d '[Optional] Mission Control Admin token.` `'
complete -c jf -n '__fish_seen_subcommand_from jpd-delete jd' -f -l url -r -d '[Optional] JFrog Mission Control URL.` `'
complete -c jf -n '__fish_seen_subcommand_from license-acquire la' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from mc' -a 'license-acquire la' -d 'Acquire a license from the specified bucket and mark it as taken by the provided name.'
complete -c jf -n '__fish_seen_subcommand_from license-acquire la' -f -l access-token -r -d '[Optional] Mission Control Admin token.` `'
complete -c jf -n '__fish_seen_subcommand_from license-acquire la' -f -l url -r -d '[Optional] JFrog Mission Control URL.` `'
complete -c jf -n '__fish_seen_subcommand_from license-deploy ld' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from mc' -a 'license-deploy ld' -d 'Deploy a license from the specified bucket to an existing JPD. You may also deploy a number of licenses to an Artifactory HA.'
complete -c jf -n '__fish_seen_subcommand_from license-deploy ld' -f -l access-token -r -d '[Optional] Mission Control Admin token.` `'
complete -c jf -n '__fish_seen_subcommand_from license-deploy ld' -f -l license-count -r -d '[Default: 1] The number of licenses to deploy. Minimum value is 1.` `'
complete -c jf -n '__fish_seen_subcommand_from license-deploy ld' -f -l url -r -d '[Optional] JFrog Mission Control URL.` `'
complete -c jf -n '__fish_seen_subcommand_from license-release lr' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from mc' -a 'license-release lr' -d 'Release a license from a JPD and return it to the specified bucket.'
complete -c jf -n '__fish_seen_subcommand_from license-release lr' -f -l access-token -r -d '[Optional] Mission Control Admin token.` `'
complete -c jf -n '__fish_seen_subcommand_from license-release lr' -f -l url -r -d '[Optional] JFrog Mission Control URL.` `'
complete -c jf -n '__fish_seen_subcommand_from xr' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_jf_no_subcommand' -a 'xr' -d 'Xray commands.'
complete -c jf -n '__fish_seen_subcommand_from audit-go ago' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from xr' -a 'audit-go ago' -d 'Execute an audit Go command, using the configured Xray details.'
complete -c jf -n '__fish_seen_subcommand_from audit-go ago' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from audit-go ago' -f -l extended-table -d '[Default: false] Set to true if you\'d like the table to include extended fields such as \'CVSS\' & \'Xray Issue Id\'. Ignored if provided \'format\' is not \'table\'. ` `'
complete -c jf -n '__fish_seen_subcommand_from audit-go ago' -f -l fail -d '[Default: true] Set to false if you do not wish the command to return exit code 3, even if the \'Fail Build\' rule is matched by Xray.` `'
complete -c jf -n '__fish_seen_subcommand_from audit-go ago' -f -l format -r -d '[Default: table] Defines the output format of the command. Acceptable values are: table, json, simple-json and sarif.` `'
complete -c jf -n '__fish_seen_subcommand_from audit-go ago' -f -l licenses -d '[Default: false] Set to true if you\'d like to receive licenses from Xray scanning. ` `'
complete -c jf -n '__fish_seen_subcommand_from audit-go ago' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from audit-go ago' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from audit-go ago' -f -l repo-path -r -d '[Optional] Target repo path, to enable Xray to determine watches accordingly. ` `'
complete -c jf -n '__fish_seen_subcommand_from audit-go ago' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from audit-go ago' -f -l url -r -d '[Optional] JFrog Xray URL.` `'
complete -c jf -n '__fish_seen_subcommand_from audit-go ago' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from audit-go ago' -f -l watches -r -d '[Optional] A comma separated list of Xray watches, to determine Xray\'s violations creation. ` `'
complete -c jf -n '__fish_seen_subcommand_from audit-gradle ag' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from xr' -a 'audit-gradle ag' -d 'Execute an audit Gradle command, using the configured Xray details.'
complete -c jf -n '__fish_seen_subcommand_from audit-gradle ag' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from audit-gradle ag' -f -l exclude-test-deps -d '[Default: false] [Gradle] Set to true if you\'d like to exclude Gradle test dependencies from Xray scanning.` `'
complete -c jf -n '__fish_seen_subcommand_from audit-gradle ag' -f -l extended-table -d '[Default: false] Set to true if you\'d like the table to include extended fields such as \'CVSS\' & \'Xray Issue Id\'. Ignored if provided \'format\' is not \'table\'. ` `'
complete -c jf -n '__fish_seen_subcommand_from audit-gradle ag' -f -l fail -d '[Default: true] Set to false if you do not wish the command to return exit code 3, even if the \'Fail Build\' rule is matched by Xray.` `'
complete -c jf -n '__fish_seen_subcommand_from audit-gradle ag' -f -l format -r -d '[Default: table] Defines the output format of the command. Acceptable values are: table, json, simple-json and sarif.` `'
complete -c jf -n '__fish_seen_subcommand_from audit-gradle ag' -f -l licenses -d '[Default: false] Set to true if you\'d like to receive licenses from Xray scanning. ` `'
complete -c jf -n '__fish_seen_subcommand_from audit-gradle ag' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from audit-gradle ag' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from audit-gradle ag' -f -l repo-path -r -d '[Optional] Target repo path, to enable Xray to determine watches accordingly. ` `'
complete -c jf -n '__fish_seen_subcommand_from audit-gradle ag' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from audit-gradle ag' -f -l url -r -d '[Optional] JFrog Xray URL.` `'
complete -c jf -n '__fish_seen_subcommand_from audit-gradle ag' -f -l use-wrapper -d '[Default: false] [Gradle] Set to true if you\'d like to use the Gradle wrapper.` `'
complete -c jf -n '__fish_seen_subcommand_from audit-gradle ag' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from audit-gradle ag' -f -l watches -r -d '[Optional] A comma separated list of Xray watches, to determine Xray\'s violations creation. ` `'
complete -c jf -n '__fish_seen_subcommand_from audit-mvn am' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from xr' -a 'audit-mvn am' -d 'Execute an audit Maven command, using the configured Xray details.'
complete -c jf -n '__fish_seen_subcommand_from audit-mvn am' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from audit-mvn am' -f -l extended-table -d '[Default: false] Set to true if you\'d like the table to include extended fields such as \'CVSS\' & \'Xray Issue Id\'. Ignored if provided \'format\' is not \'table\'. ` `'
complete -c jf -n '__fish_seen_subcommand_from audit-mvn am' -f -l fail -d '[Default: true] Set to false if you do not wish the command to return exit code 3, even if the \'Fail Build\' rule is matched by Xray.` `'
complete -c jf -n '__fish_seen_subcommand_from audit-mvn am' -f -l format -r -d '[Default: table] Defines the output format of the command. Acceptable values are: table, json, simple-json and sarif.` `'
complete -c jf -n '__fish_seen_subcommand_from audit-mvn am' -f -l insecure-tls -d '[Default: false] Set to true to skip TLS certificates verification.` `'
complete -c jf -n '__fish_seen_subcommand_from audit-mvn am' -f -l licenses -d '[Default: false] Set to true if you\'d like to receive licenses from Xray scanning. ` `'
complete -c jf -n '__fish_seen_subcommand_from audit-mvn am' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from audit-mvn am' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from audit-mvn am' -f -l repo-path -r -d '[Optional] Target repo path, to enable Xray to determine watches accordingly. ` `'
complete -c jf -n '__fish_seen_subcommand_from audit-mvn am' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from audit-mvn am' -f -l url -r -d '[Optional] JFrog Xray URL.` `'
complete -c jf -n '__fish_seen_subcommand_from audit-mvn am' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from audit-mvn am' -f -l watches -r -d '[Optional] A comma separated list of Xray watches, to determine Xray\'s violations creation. ` `'
complete -c jf -n '__fish_seen_subcommand_from audit-npm an' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from xr' -a 'audit-npm an' -d 'Execute an audit Npm command, using the configured Xray details.'
complete -c jf -n '__fish_seen_subcommand_from audit-npm an' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from audit-npm an' -f -l dep-type -r -d '[Default: all] [npm] Defines npm dependencies type. Possible values are: all, devOnly and prodOnly` `'
complete -c jf -n '__fish_seen_subcommand_from audit-npm an' -f -l extended-table -d '[Default: false] Set to true if you\'d like the table to include extended fields such as \'CVSS\' & \'Xray Issue Id\'. Ignored if provided \'format\' is not \'table\'. ` `'
complete -c jf -n '__fish_seen_subcommand_from audit-npm an' -f -l fail -d '[Default: true] Set to false if you do not wish the command to return exit code 3, even if the \'Fail Build\' rule is matched by Xray.` `'
complete -c jf -n '__fish_seen_subcommand_from audit-npm an' -f -l format -r -d '[Default: table] Defines the output format of the command. Acceptable values are: table, json, simple-json and sarif.` `'
complete -c jf -n '__fish_seen_subcommand_from audit-npm an' -f -l licenses -d '[Default: false] Set to true if you\'d like to receive licenses from Xray scanning. ` `'
complete -c jf -n '__fish_seen_subcommand_from audit-npm an' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from audit-npm an' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from audit-npm an' -f -l repo-path -r -d '[Optional] Target repo path, to enable Xray to determine watches accordingly. ` `'
complete -c jf -n '__fish_seen_subcommand_from audit-npm an' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from audit-npm an' -f -l url -r -d '[Optional] JFrog Xray URL.` `'
complete -c jf -n '__fish_seen_subcommand_from audit-npm an' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from audit-npm an' -f -l watches -r -d '[Optional] A comma separated list of Xray watches, to determine Xray\'s violations creation. ` `'
complete -c jf -n '__fish_seen_subcommand_from audit-pip ap' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from xr' -a 'audit-pip ap' -d 'Execute an audit Pip command, using the configured Xray details.'
complete -c jf -n '__fish_seen_subcommand_from audit-pip ap' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from audit-pip ap' -f -l extended-table -d '[Default: false] Set to true if you\'d like the table to include extended fields such as \'CVSS\' & \'Xray Issue Id\'. Ignored if provided \'format\' is not \'table\'. ` `'
complete -c jf -n '__fish_seen_subcommand_from audit-pip ap' -f -l fail -d '[Default: true] Set to false if you do not wish the command to return exit code 3, even if the \'Fail Build\' rule is matched by Xray.` `'
complete -c jf -n '__fish_seen_subcommand_from audit-pip ap' -f -l format -r -d '[Default: table] Defines the output format of the command. Acceptable values are: table, json, simple-json and sarif.` `'
complete -c jf -n '__fish_seen_subcommand_from audit-pip ap' -f -l licenses -d '[Default: false] Set to true if you\'d like to receive licenses from Xray scanning. ` `'
complete -c jf -n '__fish_seen_subcommand_from audit-pip ap' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from audit-pip ap' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from audit-pip ap' -f -l repo-path -r -d '[Optional] Target repo path, to enable Xray to determine watches accordingly. ` `'
complete -c jf -n '__fish_seen_subcommand_from audit-pip ap' -f -l requirements-file -r -d '[Optional] [Pip] Defines pip requirements file name. For example: \'requirements.txt\' ` `'
complete -c jf -n '__fish_seen_subcommand_from audit-pip ap' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from audit-pip ap' -f -l url -r -d '[Optional] JFrog Xray URL.` `'
complete -c jf -n '__fish_seen_subcommand_from audit-pip ap' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from audit-pip ap' -f -l watches -r -d '[Optional] A comma separated list of Xray watches, to determine Xray\'s violations creation. ` `'
complete -c jf -n '__fish_seen_subcommand_from curl cl' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from xr' -a 'curl cl' -d 'Execute a cUrl command, using the configured Xray details.'
complete -c jf -n '__fish_seen_subcommand_from curl cl' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from offline-update ou' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from xr' -a 'offline-update ou' -d 'Download Xray offline updates.'
complete -c jf -n '__fish_seen_subcommand_from offline-update ou' -f -l dbsyncv3 -d '[Default: false] Set to true to use Xray DBSync V3. ` `'
complete -c jf -n '__fish_seen_subcommand_from offline-update ou' -f -l from -r -d '[Optional] From update date in YYYY-MM-DD format.` `'
complete -c jf -n '__fish_seen_subcommand_from offline-update ou' -f -l license-id -r -d '[Mandatory] Xray license ID.` `'
complete -c jf -n '__fish_seen_subcommand_from offline-update ou' -f -l periodic -d '[Default: false] Set to true to get the Xray DBSync V3 Periodic Package (Use with dbsyncv3 flag). ` `'
complete -c jf -n '__fish_seen_subcommand_from offline-update ou' -f -l target -r -d '[Default: ./] Path for downloaded update files.` `'
complete -c jf -n '__fish_seen_subcommand_from offline-update ou' -f -l to -r -d '[Optional] To update date in YYYY-MM-DD format.` `'
complete -c jf -n '__fish_seen_subcommand_from offline-update ou' -f -l version -r -d '[Optional] Xray API version.` `'
complete -c jf -n '__fish_seen_subcommand_from scan s' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from xr' -a 'scan s' -d 'Scan files located on the local file-system with Xray.'
complete -c jf -n '__fish_seen_subcommand_from scan s' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from scan s' -f -l ant -d '[Default: false] Set to true to use an ant pattern instead of wildcards expression to collect files to scan.` `'
complete -c jf -n '__fish_seen_subcommand_from scan s' -f -l bypass-archive-limits -d '[Default: false] Set to true to bypass the indexer-app archive limits.` `'
complete -c jf -n '__fish_seen_subcommand_from scan s' -f -l extended-table -d '[Default: false] Set to true if you\'d like the table to include extended fields such as \'CVSS\' & \'Xray Issue Id\'. Ignored if provided \'format\' is not \'table\'. ` `'
complete -c jf -n '__fish_seen_subcommand_from scan s' -f -l fail -d '[Default: true] Set to false if you do not wish the command to return exit code 3, even if the \'Fail Build\' rule is matched by Xray.` `'
complete -c jf -n '__fish_seen_subcommand_from scan s' -f -l format -r -d '[Default: table] Defines the output format of the command. Acceptable values are: table, json, simple-json and sarif.` `'
complete -c jf -n '__fish_seen_subcommand_from scan s' -f -l licenses -d '[Default: false] Set to true if you\'d like to receive licenses from Xray scanning. ` `'
complete -c jf -n '__fish_seen_subcommand_from scan s' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from scan s' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from scan s' -f -l recursive -d '[Default: true] Set to false if you do not wish to collect artifacts in sub-folders to be scanned by Xray.` `'
complete -c jf -n '__fish_seen_subcommand_from scan s' -f -l regexp -d '[Default: false] Set to true to use a regular expression instead of wildcards expression to collect files to scan.` `'
complete -c jf -n '__fish_seen_subcommand_from scan s' -f -l repo-path -r -d '[Optional] Target repo path, to enable Xray to determine watches accordingly. ` `'
complete -c jf -n '__fish_seen_subcommand_from scan s' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from scan s' -f -l spec -r -d '[Optional] Path to a File Spec.` `'
complete -c jf -n '__fish_seen_subcommand_from scan s' -f -l threads -r -d '[Default: 3] Number of working threads.` `'
complete -c jf -n '__fish_seen_subcommand_from scan s' -f -l url -r -d '[Optional] JFrog Xray URL.` `'
complete -c jf -n '__fish_seen_subcommand_from scan s' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from scan s' -f -l watches -r -d '[Optional] A comma separated list of Xray watches, to determine Xray\'s violations creation. ` `'
complete -c jf -n '__fish_seen_subcommand_from ds' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_jf_no_subcommand' -a 'ds' -d 'Distribution commands.'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-create rbc' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from ds' -a 'release-bundle-create rbc' -d 'Create a release bundle.'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-create rbc' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-create rbc' -f -l desc -r -d '[Optional] Description of the release bundle.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-create rbc' -f -l detailed-summary -d '[Default: false] Set to true to get a command summary with details about the release bundle artifact.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-create rbc' -f -l dry-run -d '[Default: false] Set to true to disable communication with JFrog Distribution.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-create rbc' -f -l exclusions -r -d '[Optional] Semicolon-separated list of exclusions. Exclusions can include the * and the ? wildcards.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-create rbc' -f -l insecure-tls -d '[Default: false] Set to true to skip TLS certificates verification.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-create rbc' -f -l passphrase -r -d '[Optional] The passphrase for the signing key. ` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-create rbc' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-create rbc' -f -l release-notes-path -r -d '[Optional] Path to a file describes the release notes for the release bundle version.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-create rbc' -f -l release-notes-syntax -r -d '[Default: plain_text] The syntax for the release notes. Can be one of \'markdown\', \'asciidoc\', or \'plain_text` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-create rbc' -f -l repo -r -d '[Optional] A repository name at source Artifactory to store release bundle artifacts in. If not provided, Artifactory will use the default one.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-create rbc' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-create rbc' -f -l sign -d '[Default: false] If set to true, automatically signs the release bundle version.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-create rbc' -f -l spec -r -d '[Optional] Path to a File Spec.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-create rbc' -f -l spec-vars -r -d '[Optional] List of variables in the form of "key1=value1;key2=value2;..." to be replaced in the File Spec. In the File Spec, the variables should be used as follows: ${key1}.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-create rbc' -f -l target -r -d '[Optional] The target path for distributed artifacts on the edge node. If not specified, the artifacts will have the same path and name on the edge node, as on the source Artifactory server. For flexibility in specifying the distribution path, you can include placeholders in the form of {1}, {2} which are replaced by corresponding tokens in the pattern path that are enclosed in parenthesis. ` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-create rbc' -f -l target-props -r -d '[Optional] The list of properties, in the form of key1=value1;key2=value2,..., to be added to the artifacts after distribution of the release bundle.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-create rbc' -f -l url -r -d '[Optional] JFrog Distribution URL.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-create rbc' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-delete rbdel' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from ds' -a 'release-bundle-delete rbdel' -d 'Delete a release bundle.'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-delete rbdel' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-delete rbdel' -f -l city -r -d '[Default: \'*\'] Wildcard filter for site city name. ` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-delete rbdel' -f -l country-codes -r -d '[Default: \'*\'] Semicolon-separated list of wildcard filters for site country codes. ` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-delete rbdel' -f -l delete-from-dist -d '[Default: false] Set to true to delete release bundle version in JFrog Distribution itself after deletion is complete in the specified Edge node/s.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-delete rbdel' -f -l dist-rules -r -d 'Path to distribution rules.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-delete rbdel' -f -l dry-run -d '[Default: false] Set to true to disable communication with JFrog Distribution.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-delete rbdel' -f -l insecure-tls -d '[Default: false] Set to true to skip TLS certificates verification.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-delete rbdel' -f -l max-wait-minutes -r -d '[Default: 60] Max minutes to wait for sync distribution. ` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-delete rbdel' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-delete rbdel' -f -l quiet -d '[Default: $CI] Set to true to skip the delete confirmation message.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-delete rbdel' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-delete rbdel' -f -l site -r -d '[Default: \'*\'] Wildcard filter for site name. ` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-delete rbdel' -f -l sync -d '[Default: false] Set to true to enable sync distribution (the command execution will end when the distribution process ends).` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-delete rbdel' -f -l url -r -d '[Optional] JFrog Distribution URL.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-delete rbdel' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-distribute rbd' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from ds' -a 'release-bundle-distribute rbd' -d 'Distribute a release bundle.'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-distribute rbd' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-distribute rbd' -f -l city -r -d '[Default: \'*\'] Wildcard filter for site city name. ` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-distribute rbd' -f -l country-codes -r -d '[Default: \'*\'] Semicolon-separated list of wildcard filters for site country codes. ` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-distribute rbd' -f -l create-repo -d '[Default: false] Set to true to create the repository on the edge if it does not exist.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-distribute rbd' -f -l dist-rules -r -d 'Path to distribution rules.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-distribute rbd' -f -l dry-run -d '[Default: false] Set to true to disable communication with JFrog Distribution.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-distribute rbd' -f -l insecure-tls -d '[Default: false] Set to true to skip TLS certificates verification.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-distribute rbd' -f -l max-wait-minutes -r -d '[Default: 60] Max minutes to wait for sync distribution. ` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-distribute rbd' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-distribute rbd' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-distribute rbd' -f -l site -r -d '[Default: \'*\'] Wildcard filter for site name. ` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-distribute rbd' -f -l sync -d '[Default: false] Set to true to enable sync distribution (the command execution will end when the distribution process ends).` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-distribute rbd' -f -l url -r -d '[Optional] JFrog Distribution URL.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-distribute rbd' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-sign rbs' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from ds' -a 'release-bundle-sign rbs' -d 'Sign a release bundle.'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-sign rbs' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-sign rbs' -f -l detailed-summary -d '[Default: false] Set to true to get a command summary with details about the release bundle artifact.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-sign rbs' -f -l insecure-tls -d '[Default: false] Set to true to skip TLS certificates verification.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-sign rbs' -f -l passphrase -r -d '[Optional] The passphrase for the signing key. ` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-sign rbs' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-sign rbs' -f -l repo -r -d '[Optional] A repository name at source Artifactory to store release bundle artifacts in. If not provided, Artifactory will use the default one.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-sign rbs' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-sign rbs' -f -l url -r -d '[Optional] JFrog Distribution URL.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-sign rbs' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-update rbu' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from ds' -a 'release-bundle-update rbu' -d 'Updates an existing unsigned release bundle version.'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-update rbu' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-update rbu' -f -l desc -r -d '[Optional] Description of the release bundle.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-update rbu' -f -l detailed-summary -d '[Default: false] Set to true to get a command summary with details about the release bundle artifact.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-update rbu' -f -l dry-run -d '[Default: false] Set to true to disable communication with JFrog Distribution.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-update rbu' -f -l exclusions -r -d '[Optional] Semicolon-separated list of exclusions. Exclusions can include the * and the ? wildcards.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-update rbu' -f -l insecure-tls -d '[Default: false] Set to true to skip TLS certificates verification.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-update rbu' -f -l passphrase -r -d '[Optional] The passphrase for the signing key. ` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-update rbu' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-update rbu' -f -l release-notes-path -r -d '[Optional] Path to a file describes the release notes for the release bundle version.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-update rbu' -f -l release-notes-syntax -r -d '[Default: plain_text] The syntax for the release notes. Can be one of \'markdown\', \'asciidoc\', or \'plain_text` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-update rbu' -f -l repo -r -d '[Optional] A repository name at source Artifactory to store release bundle artifacts in. If not provided, Artifactory will use the default one.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-update rbu' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-update rbu' -f -l sign -d '[Default: false] If set to true, automatically signs the release bundle version.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-update rbu' -f -l spec -r -d '[Optional] Path to a File Spec.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-update rbu' -f -l spec-vars -r -d '[Optional] List of variables in the form of "key1=value1;key2=value2;..." to be replaced in the File Spec. In the File Spec, the variables should be used as follows: ${key1}.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-update rbu' -f -l target -r -d '[Optional] The target path for distributed artifacts on the edge node. If not specified, the artifacts will have the same path and name on the edge node, as on the source Artifactory server. For flexibility in specifying the distribution path, you can include placeholders in the form of {1}, {2} which are replaced by corresponding tokens in the pattern path that are enclosed in parenthesis. ` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-update rbu' -f -l target-props -r -d '[Optional] The list of properties, in the form of key1=value1;key2=value2,..., to be added to the artifacts after distribution of the release bundle.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-update rbu' -f -l url -r -d '[Optional] JFrog Distribution URL.` `'
complete -c jf -n '__fish_seen_subcommand_from release-bundle-update rbu' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from completion' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_jf_no_subcommand' -a 'completion' -d 'Generate autocomplete scripts.'
complete -c jf -n '__fish_seen_subcommand_from bash' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from completion' -a 'bash' -d 'Generate bash completion script.'
complete -c jf -n '__fish_seen_subcommand_from bash' -f -l install -d '[Default: false] Set to true to install the completion script instead of printing it to the standard output. ` `'
complete -c jf -n '__fish_seen_subcommand_from fish' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from completion' -a 'fish' -d 'Generate fish completion script.'
complete -c jf -n '__fish_seen_subcommand_from fish' -f -l install -d '[Default: false] Set to true to install the completion script instead of printing it to the standard output. ` `'
complete -c jf -n '__fish_seen_subcommand_from zsh' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from completion' -a 'zsh' -d 'Generate zsh completion script.'
complete -c jf -n '__fish_seen_subcommand_from zsh' -f -l install -d '[Default: false] Set to true to install the completion script instead of printing it to the standard output. ` `'
complete -c jf -n '__fish_seen_subcommand_from plugin' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_jf_no_subcommand' -a 'plugin' -d 'Plugins handling commands.'
complete -c jf -n '__fish_seen_subcommand_from install i' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from plugin' -a 'install i' -d 'Install or upgrade a JFrog CLI plugin.'
complete -c jf -n '__fish_seen_subcommand_from publish p' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from plugin' -a 'publish p' -d 'Publishing a JFrog CLI plugin.'
complete -c jf -n '__fish_seen_subcommand_from uninstall ui' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from plugin' -a 'uninstall ui' -d 'Uninstall a JFrog CLI plugin.'
complete -c jf -n '__fish_seen_subcommand_from config c' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_jf_no_subcommand' -a 'config c' -d 'Config commands.'
complete -c jf -n '__fish_seen_subcommand_from add' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from config c' -a 'add' -d 'Adds a server configuration.'
complete -c jf -n '__fish_seen_subcommand_from add' -f -l access-token -r -d '[Optional] JFrog Platform access token. ` `'
complete -c jf -n '__fish_seen_subcommand_from add' -f -l artifactory-url -r -d '[Optional] JFrog Artifactory URL.` `'
complete -c jf -n '__fish_seen_subcommand_from add' -f -l basic-auth-only -d '[Default: false] Set to true to disable replacing username and password/API key with automatically created access token that\'s refreshed hourly. Username and password/API key will still be used with commands which use external tools or the JFrog Distribution service. Can only be passed along with username and password/API key options.` `'
complete -c jf -n '__fish_seen_subcommand_from add' -f -l client-cert-key-path -r -d '[Optional] Private key file for the client certificate in PEM format.` `'
complete -c jf -n '__fish_seen_subcommand_from add' -f -l client-cert-path -r -d '[Optional] Client certificate file in PEM format.` `'
complete -c jf -n '__fish_seen_subcommand_from add' -f -l distribution-url -r -d '[Optional] JFrog Distribution URL.` `'
complete -c jf -n '__fish_seen_subcommand_from add' -f -l enc-password -d '[Default: true] If set to false then the configured password will not be encrypted using Artifactory\'s encryption API.` `'
complete -c jf -n '__fish_seen_subcommand_from add' -f -l insecure-tls -r -d '[Default: false] Set to true to skip TLS certificates verification, while encrypting the Artifactory password during the config process.` `'
complete -c jf -n '__fish_seen_subcommand_from add' -f -l interactive -d '[Default: true, unless $CI is true] Set to false if you do not want the config command to be interactive. If true, the --url option becomes optional.` `'
complete -c jf -n '__fish_seen_subcommand_from add' -f -l mission-control-url -r -d '[Optional] JFrog Mission Control URL.` `'
complete -c jf -n '__fish_seen_subcommand_from add' -f -l overwrite -d '[Default: false] Overwrites the instance configuration if an instance with the same ID already exists.` `'
complete -c jf -n '__fish_seen_subcommand_from add' -f -l password -r -d '[Optional] JFrog Platform password or API key. ` `'
complete -c jf -n '__fish_seen_subcommand_from add' -f -l pipelines-url -r -d '[Optional] JFrog Pipelines URL.` `'
complete -c jf -n '__fish_seen_subcommand_from add' -f -l ssh-key-path -r -d '[Optional] SSH key file path.` `'
complete -c jf -n '__fish_seen_subcommand_from add' -f -l ssh-passphrase -r -d '[Optional] SSH key passphrase.` `'
complete -c jf -n '__fish_seen_subcommand_from add' -f -l url -r -d '[Optional] JFrog platform URL.` `'
complete -c jf -n '__fish_seen_subcommand_from add' -f -l user -r -d '[Optional] JFrog Platform username. ` `'
complete -c jf -n '__fish_seen_subcommand_from add' -f -l xray-url -r -d '[Optional] JFrog Xray URL.` `'
complete -c jf -n '__fish_seen_subcommand_from edit' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from config c' -a 'edit' -d 'Edits a server configuration.'
complete -c jf -n '__fish_seen_subcommand_from edit' -f -l access-token -r -d '[Optional] JFrog Platform access token. ` `'
complete -c jf -n '__fish_seen_subcommand_from edit' -f -l artifactory-url -r -d '[Optional] JFrog Artifactory URL.` `'
complete -c jf -n '__fish_seen_subcommand_from edit' -f -l basic-auth-only -d '[Default: false] Set to true to disable replacing username and password/API key with automatically created access token that\'s refreshed hourly. Username and password/API key will still be used with commands which use external tools or the JFrog Distribution service. Can only be passed along with username and password/API key options.` `'
complete -c jf -n '__fish_seen_subcommand_from edit' -f -l client-cert-key-path -r -d '[Optional] Private key file for the client certificate in PEM format.` `'
complete -c jf -n '__fish_seen_subcommand_from edit' -f -l client-cert-path -r -d '[Optional] Client certificate file in PEM format.` `'
complete -c jf -n '__fish_seen_subcommand_from edit' -f -l distribution-url -r -d '[Optional] JFrog Distribution URL.` `'
complete -c jf -n '__fish_seen_subcommand_from edit' -f -l enc-password -d '[Default: true] If set to false then the configured password will not be encrypted using Artifactory\'s encryption API.` `'
complete -c jf -n '__fish_seen_subcommand_from edit' -f -l insecure-tls -r -d '[Default: false] Set to true to skip TLS certificates verification, while encrypting the Artifactory password during the config process.` `'
complete -c jf -n '__fish_seen_subcommand_from edit' -f -l interactive -d '[Default: true, unless $CI is true] Set to false if you do not want the config command to be interactive. If true, the --url option becomes optional.` `'
complete -c jf -n '__fish_seen_subcommand_from edit' -f -l mission-control-url -r -d '[Optional] JFrog Mission Control URL.` `'
complete -c jf -n '__fish_seen_subcommand_from edit' -f -l password -r -d '[Optional] JFrog Platform password or API key. ` `'
complete -c jf -n '__fish_seen_subcommand_from edit' -f -l pipelines-url -r -d '[Optional] JFrog Pipelines URL.` `'
complete -c jf -n '__fish_seen_subcommand_from edit' -f -l ssh-key-path -r -d '[Optional] SSH key file path.` `'
complete -c jf -n '__fish_seen_subcommand_from edit' -f -l ssh-passphrase -r -d '[Optional] SSH key passphrase.` `'
complete -c jf -n '__fish_seen_subcommand_from edit' -f -l url -r -d '[Optional] JFrog platform URL.` `'
complete -c jf -n '__fish_seen_subcommand_from edit' -f -l user -r -d '[Optional] JFrog Platform username. ` `'
complete -c jf -n '__fish_seen_subcommand_from edit' -f -l xray-url -r -d '[Optional] JFrog Xray URL.` `'
complete -c jf -n '__fish_seen_subcommand_from export ex' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from config c' -a 'export ex' -d 'Creates a server configuration token. The generated Config Token can be imported by the "jf config import <Config Token>" command.'
complete -c jf -n '__fish_seen_subcommand_from import im' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from config c' -a 'import im' -d 'Imports a server configuration from a Config Token. A Config Token is generated by the "jf config export <Server ID>" command.'
complete -c jf -n '__fish_seen_subcommand_from remove rm' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from config c' -a 'remove rm' -d 'Removes the stored configuration. In case this argument is followed by a configured server ID, then only this server\'s configurations is removed.'
complete -c jf -n '__fish_seen_subcommand_from remove rm' -f -l quiet -d '[Default: $CI] Set to true to skip the delete confirmation message.` `'
complete -c jf -n '__fish_seen_subcommand_from show s' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from config c' -a 'show s' -d 'Shows the stored configuration. In case this argument is followed by a configured server ID, then only this server\'s configurations is shown.'
complete -c jf -n '__fish_seen_subcommand_from use' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from config c' -a 'use' -d 'Set the active server by its ID.'
complete -c jf -n '__fish_seen_subcommand_from project' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_jf_no_subcommand' -a 'project' -d 'Project commands.'
complete -c jf -n '__fish_seen_subcommand_from init' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_seen_subcommand_from project' -a 'init' -d 'Initialize a new project environment.'
complete -c jf -n '__fish_seen_subcommand_from init' -f -l path -r -d '[Default: ./] Full path to the code project. ` `'
complete -c jf -n '__fish_seen_subcommand_from init' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from ci-setup' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_jf_no_subcommand' -a 'ci-setup' -d 'Set up a CI pipeline with the JFrog Platform.'
complete -c jf -n '__fish_seen_subcommand_from options' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_jf_no_subcommand' -a 'options' -d 'Show all supported environment variables.'
complete -c jf -n '__fish_seen_subcommand_from audit aud' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_jf_no_subcommand' -a 'audit aud' -d 'Execute an audit command, using the configured Xray details.'
complete -c jf -n '__fish_seen_subcommand_from audit aud' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from audit aud' -f -l dep-type -r -d '[Default: all] [npm] Defines npm dependencies type. Possible values are: all, devOnly and prodOnly` `'
complete -c jf -n '__fish_seen_subcommand_from audit aud' -f -l exclude-test-deps -d '[Default: false] [Gradle] Set to true if you\'d like to exclude Gradle test dependencies from Xray scanning.` `'
complete -c jf -n '__fish_seen_subcommand_from audit aud' -f -l extended-table -d '[Default: false] Set to true if you\'d like the table to include extended fields such as \'CVSS\' & \'Xray Issue Id\'. Ignored if provided \'format\' is not \'table\'. ` `'
complete -c jf -n '__fish_seen_subcommand_from audit aud' -f -l fail -d '[Default: true] Set to false if you do not wish the command to return exit code 3, even if the \'Fail Build\' rule is matched by Xray.` `'
complete -c jf -n '__fish_seen_subcommand_from audit aud' -f -l format -r -d '[Default: table] Defines the output format of the command. Acceptable values are: table, json, simple-json and sarif.` `'
complete -c jf -n '__fish_seen_subcommand_from audit aud' -f -l go -d '[Default: false] Set to true to request audit for a Go project.` `'
complete -c jf -n '__fish_seen_subcommand_from audit aud' -f -l gradle -d '[Default: false] Set to true to request audit for a Gradle project.` `'
complete -c jf -n '__fish_seen_subcommand_from audit aud' -f -l insecure-tls -d '[Default: false] Set to true to skip TLS certificates verification.` `'
complete -c jf -n '__fish_seen_subcommand_from audit aud' -f -l licenses -d '[Default: false] Set to true if you\'d like to receive licenses from Xray scanning. ` `'
complete -c jf -n '__fish_seen_subcommand_from audit aud' -f -l mvn -d '[Default: false] Set to true to request audit for a Maven project.` `'
complete -c jf -n '__fish_seen_subcommand_from audit aud' -f -l npm -d '[Default: false] Set to true to request audit for an npm project.` `'
complete -c jf -n '__fish_seen_subcommand_from audit aud' -f -l nuget -d '[Default: false] Set to true to request audit for a .NET project.` `'
complete -c jf -n '__fish_seen_subcommand_from audit aud' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from audit aud' -f -l pip -d '[Default: false] Set to true to request audit for a Pip project.` `'
complete -c jf -n '__fish_seen_subcommand_from audit aud' -f -l pipenv -d '[Default: false] Set to true to request audit for a Pipenv project.` `'
complete -c jf -n '__fish_seen_subcommand_from audit aud' -f -l poetry -d '[Default: false] Set to true to request audit for a Poetry project.` `'
complete -c jf -n '__fish_seen_subcommand_from audit aud' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from audit aud' -f -l repo-path -r -d '[Optional] Target repo path, to enable Xray to determine watches accordingly. ` `'
complete -c jf -n '__fish_seen_subcommand_from audit aud' -f -l requirements-file -r -d '[Optional] [Pip] Defines pip requirements file name. For example: \'requirements.txt\' ` `'
complete -c jf -n '__fish_seen_subcommand_from audit aud' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from audit aud' -f -l url -r -d '[Optional] JFrog Xray URL.` `'
complete -c jf -n '__fish_seen_subcommand_from audit aud' -f -l use-wrapper -d '[Default: false] [Gradle] Set to true if you\'d like to use the Gradle wrapper.` `'
complete -c jf -n '__fish_seen_subcommand_from audit aud' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from audit aud' -f -l watches -r -d '[Optional] A comma separated list of Xray watches, to determine Xray\'s violations creation. ` `'
complete -c jf -n '__fish_seen_subcommand_from audit aud' -f -l working-dirs -r -d '[Optional] A comma separated list of relative working directories, to determine audit targets locations. ` `'
complete -c jf -n '__fish_seen_subcommand_from audit aud' -f -l yarn -d '[Default: false] Set to true to request audit for a Yarn 2+ project.` `'
complete -c jf -n '__fish_seen_subcommand_from build-scan bs' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_jf_no_subcommand' -a 'build-scan bs' -d 'Scan a published build-info with Xray.'
complete -c jf -n '__fish_seen_subcommand_from build-scan bs' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from build-scan bs' -f -l extended-table -d '[Default: false] Set to true if you\'d like the table to include extended fields such as \'CVSS\' & \'Xray Issue Id\'. Ignored if provided \'format\' is not \'table\'. ` `'
complete -c jf -n '__fish_seen_subcommand_from build-scan bs' -f -l fail -d '[Default: true] Set to false if you do not wish the command to return exit code 3, even if the \'Fail Build\' rule is matched by Xray.` `'
complete -c jf -n '__fish_seen_subcommand_from build-scan bs' -f -l format -r -d '[Default: table] Defines the output format of the command. Acceptable values are: table, json, simple-json and sarif.` `'
complete -c jf -n '__fish_seen_subcommand_from build-scan bs' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from build-scan bs' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from build-scan bs' -f -l rescan -d '[Default: false] Set to true when scanning an already successfully scanned build, for example after adding an ignore rule.` `'
complete -c jf -n '__fish_seen_subcommand_from build-scan bs' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from build-scan bs' -f -l url -r -d '[Optional] JFrog Xray URL.` `'
complete -c jf -n '__fish_seen_subcommand_from build-scan bs' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from build-scan bs' -f -l vuln -d '[Default: false] Set to true if you\'d like to receive all vulnerabilities, regardless of the policy configured in Xray. ` `'
complete -c jf -n '__fish_seen_subcommand_from scan s' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_jf_no_subcommand' -a 'scan s' -d 'Scan files located on the local file-system with Xray.'
complete -c jf -n '__fish_seen_subcommand_from scan s' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from scan s' -f -l ant -d '[Default: false] Set to true to use an ant pattern instead of wildcards expression to collect files to scan.` `'
complete -c jf -n '__fish_seen_subcommand_from scan s' -f -l bypass-archive-limits -d '[Default: false] Set to true to bypass the indexer-app archive limits.` `'
complete -c jf -n '__fish_seen_subcommand_from scan s' -f -l extended-table -d '[Default: false] Set to true if you\'d like the table to include extended fields such as \'CVSS\' & \'Xray Issue Id\'. Ignored if provided \'format\' is not \'table\'. ` `'
complete -c jf -n '__fish_seen_subcommand_from scan s' -f -l fail -d '[Default: true] Set to false if you do not wish the command to return exit code 3, even if the \'Fail Build\' rule is matched by Xray.` `'
complete -c jf -n '__fish_seen_subcommand_from scan s' -f -l format -r -d '[Default: table] Defines the output format of the command. Acceptable values are: table, json, simple-json and sarif.` `'
complete -c jf -n '__fish_seen_subcommand_from scan s' -f -l licenses -d '[Default: false] Set to true if you\'d like to receive licenses from Xray scanning. ` `'
complete -c jf -n '__fish_seen_subcommand_from scan s' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from scan s' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from scan s' -f -l recursive -d '[Default: true] Set to false if you do not wish to collect artifacts in sub-folders to be scanned by Xray.` `'
complete -c jf -n '__fish_seen_subcommand_from scan s' -f -l regexp -d '[Default: false] Set to true to use a regular expression instead of wildcards expression to collect files to scan.` `'
complete -c jf -n '__fish_seen_subcommand_from scan s' -f -l repo-path -r -d '[Optional] Target repo path, to enable Xray to determine watches accordingly. ` `'
complete -c jf -n '__fish_seen_subcommand_from scan s' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from scan s' -f -l spec -r -d '[Optional] Path to a File Spec.` `'
complete -c jf -n '__fish_seen_subcommand_from scan s' -f -l threads -r -d '[Default: 3] Number of working threads.` `'
complete -c jf -n '__fish_seen_subcommand_from scan s' -f -l url -r -d '[Optional] JFrog Xray URL.` `'
complete -c jf -n '__fish_seen_subcommand_from scan s' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from scan s' -f -l watches -r -d '[Optional] A comma separated list of Xray watches, to determine Xray\'s violations creation. ` `'
complete -c jf -n '__fish_seen_subcommand_from docker' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_jf_no_subcommand' -a 'docker' -d 'Run any docker command, including ‘jf docker scan’ for scanning a local image with Xray.'
complete -c jf -n '__fish_seen_subcommand_from docker' -f -l build-name -r -d '[Optional] Providing this option will collect and record build info for this build name. Build number option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from docker' -f -l build-number -r -d '[Optional] Providing this option will collect and record build info for this build number. Build name option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from docker' -f -l detailed-summary -d '[Default: false] Set to true to include a list of the affected files in the command summary.` `'
complete -c jf -n '__fish_seen_subcommand_from docker' -f -l extended-table -d '[Default: false] Set to true if you\'d like the table to include extended fields such as \'CVSS\' & \'Xray Issue Id\'. Ignored if provided \'format\' is not \'table\'. ` `'
complete -c jf -n '__fish_seen_subcommand_from docker' -f -l fail -d '[Default: true] Set to false if you do not wish the command to return exit code 3, even if the \'Fail Build\' rule is matched by Xray.` `'
complete -c jf -n '__fish_seen_subcommand_from docker' -f -l format -r -d '[Default: table] Defines the output format of the command. Acceptable values are: table, json, simple-json and sarif.` `'
complete -c jf -n '__fish_seen_subcommand_from docker' -f -l licenses -d '[Default: false] Set to true if you\'d like to receive licenses from Xray scanning. ` `'
complete -c jf -n '__fish_seen_subcommand_from docker' -f -l module -r -d '[Optional] Optional module name for the build-info. Build name and number options are mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from docker' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from docker' -f -l repo-path -r -d '[Optional] Target repo path, to enable Xray to determine watches accordingly. ` `'
complete -c jf -n '__fish_seen_subcommand_from docker' -f -l server-id -r -d '[Optional] Server ID configured using the config command.` `'
complete -c jf -n '__fish_seen_subcommand_from docker' -f -l skip-login -d '[Default: false] Set to true if you\'d like the command to skip performing docker login.` `'
complete -c jf -n '__fish_seen_subcommand_from docker' -f -l threads -r -d '[Default: 3] Number of working threads.` `'
complete -c jf -n '__fish_seen_subcommand_from docker' -f -l watches -r -d '[Optional] A comma separated list of Xray watches, to determine Xray\'s violations creation. ` `'
complete -c jf -n '__fish_seen_subcommand_from dotnet' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_jf_no_subcommand' -a 'dotnet' -d 'Run .NET Core CLI.'
complete -c jf -n '__fish_seen_subcommand_from dotnet' -f -l build-name -r -d '[Optional] Providing this option will collect and record build info for this build name. Build number option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from dotnet' -f -l build-number -r -d '[Optional] Providing this option will collect and record build info for this build number. Build name option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from dotnet' -f -l module -r -d '[Optional] Optional module name for the build-info. Build name and number options are mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from dotnet' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from dotnet-config dotnetc' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_jf_no_subcommand' -a 'dotnet-config dotnetc' -d 'Generate dotnet configuration.'
complete -c jf -n '__fish_seen_subcommand_from dotnet-config dotnetc' -f -l global -d '[Default: false] Set to true if you\'d like the configuration to be global (for all projects). Specific projects can override the global configuration.` `'
complete -c jf -n '__fish_seen_subcommand_from dotnet-config dotnetc' -f -l nuget-v2 -d '[Default: false] Set to true if you\'d like to use the NuGet V2 protocol when restoring packages from Artifactory.` `'
complete -c jf -n '__fish_seen_subcommand_from dotnet-config dotnetc' -f -l repo-resolve -r -d '[Optional] Repository for dependencies resolution.` `'
complete -c jf -n '__fish_seen_subcommand_from dotnet-config dotnetc' -f -l server-id-resolve -r -d '[Optional] Artifactory server ID for resolution. The server should configured using the \'jfrog c add\' command.` `'
complete -c jf -n '__fish_seen_subcommand_from go go' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_jf_no_subcommand' -a 'go go' -d 'Runs go.'
complete -c jf -n '__fish_seen_subcommand_from go go' -f -l build-name -r -d '[Optional] Providing this option will collect and record build info for this build name. Build number option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from go go' -f -l build-number -r -d '[Optional] Providing this option will collect and record build info for this build number. Build name option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from go go' -f -l module -r -d '[Optional] Optional module name for the build-info. Build name and number options are mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from go go' -f -l no-fallback -d '[Default: false] Set to true to avoid downloading packages from the VCS, if they are missing in Artifactory.` `'
complete -c jf -n '__fish_seen_subcommand_from go go' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from go-config goc' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_jf_no_subcommand' -a 'go-config goc' -d 'Generate go build configuration.'
complete -c jf -n '__fish_seen_subcommand_from go-config goc' -f -l global -d '[Default: false] Set to true if you\'d like the configuration to be global (for all projects). Specific projects can override the global configuration.` `'
complete -c jf -n '__fish_seen_subcommand_from go-config goc' -f -l repo-deploy -r -d '[Optional] Repository for artifacts deployment.` `'
complete -c jf -n '__fish_seen_subcommand_from go-config goc' -f -l repo-resolve -r -d '[Optional] Repository for dependencies resolution.` `'
complete -c jf -n '__fish_seen_subcommand_from go-config goc' -f -l server-id-deploy -r -d '[Optional] Artifactory server ID for deployment. The server should configured using the \'jfrog c add\' command.` `'
complete -c jf -n '__fish_seen_subcommand_from go-config goc' -f -l server-id-resolve -r -d '[Optional] Artifactory server ID for resolution. The server should configured using the \'jfrog c add\' command.` `'
complete -c jf -n '__fish_seen_subcommand_from go-publish gp' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_jf_no_subcommand' -a 'go-publish gp' -d 'Publish go package and/or its dependencies to Artifactory.'
complete -c jf -n '__fish_seen_subcommand_from go-publish gp' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from go-publish gp' -f -l build-name -r -d '[Optional] Providing this option will collect and record build info for this build name. Build number option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from go-publish gp' -f -l build-number -r -d '[Optional] Providing this option will collect and record build info for this build number. Build name option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from go-publish gp' -f -l detailed-summary -d '[Default: false] Set to true to include a list of the affected files in the command summary.` `'
complete -c jf -n '__fish_seen_subcommand_from go-publish gp' -f -l module -r -d '[Optional] Optional module name for the build-info. Build name and number options are mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from go-publish gp' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from go-publish gp' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from go-publish gp' -f -l url -r -d '[Optional] JFrog Artifactory URL.` `'
complete -c jf -n '__fish_seen_subcommand_from go-publish gp' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from gradle' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_jf_no_subcommand' -a 'gradle' -d 'Run Gradle build.'
complete -c jf -n '__fish_seen_subcommand_from gradle' -f -l build-name -r -d '[Optional] Providing this option will collect and record build info for this build name. Build number option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from gradle' -f -l build-number -r -d '[Optional] Providing this option will collect and record build info for this build number. Build name option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from gradle' -f -l detailed-summary -d '[Default: false] Set to true to include a list of the affected files in the command summary.` `'
complete -c jf -n '__fish_seen_subcommand_from gradle' -f -l format -r -d '[Default: table] Defines the output format of the command. Acceptable values are: table, json, simple-json and sarif.` `'
complete -c jf -n '__fish_seen_subcommand_from gradle' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from gradle' -f -l scan -r -d '[Default: false] Set if you\'d like all files to be scanned by Xray on the local file system prior to the upload, and skip the upload if any of the files are found vulnerable.` `'
complete -c jf -n '__fish_seen_subcommand_from gradle' -f -l threads -r -d '[Default: 3] Number of threads for uploading build artifacts.` `'
complete -c jf -n '__fish_seen_subcommand_from gradle-config gradlec' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_jf_no_subcommand' -a 'gradle-config gradlec' -d 'Generate gradle build configuration.'
complete -c jf -n '__fish_seen_subcommand_from gradle-config gradlec' -f -l deploy-ivy-desc -d '[Default: true] Set to false if you do not wish to deploy Ivy descriptors.` `'
complete -c jf -n '__fish_seen_subcommand_from gradle-config gradlec' -f -l deploy-maven-desc -d '[Default: true] Set to false if you do not wish to deploy Maven descriptors.` `'
complete -c jf -n '__fish_seen_subcommand_from gradle-config gradlec' -f -l global -d '[Default: false] Set to true if you\'d like the configuration to be global (for all projects). Specific projects can override the global configuration.` `'
complete -c jf -n '__fish_seen_subcommand_from gradle-config gradlec' -f -l ivy-artifacts-pattern -r -d '[Default: \'[organization]/[module]/[revision]/[artifact]-[revision](-[classifier]).[ext]\' Set the deployed Ivy artifacts pattern.` `'
complete -c jf -n '__fish_seen_subcommand_from gradle-config gradlec' -f -l ivy-desc-pattern -r -d '[Default: \'[organization]/[module]/ivy-[revision].xml\' Set the deployed Ivy descriptor pattern.` `'
complete -c jf -n '__fish_seen_subcommand_from gradle-config gradlec' -f -l repo-deploy -r -d '[Optional] Repository for artifacts deployment.` `'
complete -c jf -n '__fish_seen_subcommand_from gradle-config gradlec' -f -l repo-resolve -r -d '[Optional] Repository for dependencies resolution.` `'
complete -c jf -n '__fish_seen_subcommand_from gradle-config gradlec' -f -l server-id-deploy -r -d '[Optional] Artifactory server ID for deployment. The server should configured using the \'jfrog c add\' command.` `'
complete -c jf -n '__fish_seen_subcommand_from gradle-config gradlec' -f -l server-id-resolve -r -d '[Optional] Artifactory server ID for resolution. The server should configured using the \'jfrog c add\' command.` `'
complete -c jf -n '__fish_seen_subcommand_from gradle-config gradlec' -f -l use-wrapper -d '[Default: false] [Gradle] Set to true if you\'d like to use the Gradle wrapper.` `'
complete -c jf -n '__fish_seen_subcommand_from gradle-config gradlec' -f -l uses-plugin -d '[Default: false] Set to true if the Gradle Artifactory Plugin is already applied in the build script.` `'
complete -c jf -n '__fish_seen_subcommand_from mvn' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_jf_no_subcommand' -a 'mvn' -d 'Run Maven build.'
complete -c jf -n '__fish_seen_subcommand_from mvn' -f -l build-name -r -d '[Optional] Providing this option will collect and record build info for this build name. Build number option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from mvn' -f -l build-number -r -d '[Optional] Providing this option will collect and record build info for this build number. Build name option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from mvn' -f -l detailed-summary -d '[Default: false] Set to true to include a list of the affected files in the command summary.` `'
complete -c jf -n '__fish_seen_subcommand_from mvn' -f -l format -r -d '[Default: table] Defines the output format of the command. Acceptable values are: table, json, simple-json and sarif.` `'
complete -c jf -n '__fish_seen_subcommand_from mvn' -f -l insecure-tls -d '[Default: false] Set to true to skip TLS certificates verification.` `'
complete -c jf -n '__fish_seen_subcommand_from mvn' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from mvn' -f -l scan -r -d '[Default: false] Set if you\'d like all files to be scanned by Xray on the local file system prior to the upload, and skip the upload if any of the files are found vulnerable.` `'
complete -c jf -n '__fish_seen_subcommand_from mvn' -f -l threads -r -d '[Default: 3] Number of threads for uploading build artifacts.` `'
complete -c jf -n '__fish_seen_subcommand_from mvn-config mvnc' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_jf_no_subcommand' -a 'mvn-config mvnc' -d 'Generate maven build configuration.'
complete -c jf -n '__fish_seen_subcommand_from mvn-config mvnc' -f -l exclude-patterns -r -d '[Optional] Filter deployed artifacts by setting a wildcard pattern that specifies which artifacts to exclude. You may provide multiple patterns separated by \', \'.` `'
complete -c jf -n '__fish_seen_subcommand_from mvn-config mvnc' -f -l global -d '[Default: false] Set to true if you\'d like the configuration to be global (for all projects). Specific projects can override the global configuration.` `'
complete -c jf -n '__fish_seen_subcommand_from mvn-config mvnc' -f -l include-patterns -r -d '[Optional] Filter deployed artifacts by setting a wildcard pattern that specifies which artifacts to include. You may provide multiple patterns separated by \', \'.` `'
complete -c jf -n '__fish_seen_subcommand_from mvn-config mvnc' -f -l repo-deploy-releases -r -d '[Optional] Deployment repository for release artifacts.` `'
complete -c jf -n '__fish_seen_subcommand_from mvn-config mvnc' -f -l repo-deploy-snapshots -r -d '[Optional] Deployment repository for snapshot artifacts.` `'
complete -c jf -n '__fish_seen_subcommand_from mvn-config mvnc' -f -l repo-resolve-releases -r -d '[Optional] Resolution repository for release dependencies.` `'
complete -c jf -n '__fish_seen_subcommand_from mvn-config mvnc' -f -l repo-resolve-snapshots -r -d '[Optional] Resolution repository for snapshot dependencies.` `'
complete -c jf -n '__fish_seen_subcommand_from mvn-config mvnc' -f -l server-id-deploy -r -d '[Optional] Artifactory server ID for deployment. The server should configured using the \'jfrog c add\' command.` `'
complete -c jf -n '__fish_seen_subcommand_from mvn-config mvnc' -f -l server-id-resolve -r -d '[Optional] Artifactory server ID for resolution. The server should configured using the \'jfrog c add\' command.` `'
complete -c jf -n '__fish_seen_subcommand_from npm' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_jf_no_subcommand' -a 'npm' -d 'Run npm command.'
complete -c jf -n '__fish_seen_subcommand_from npm-config npmc' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_jf_no_subcommand' -a 'npm-config npmc' -d 'Generate npm configuration.'
complete -c jf -n '__fish_seen_subcommand_from npm-config npmc' -f -l global -d '[Default: false] Set to true if you\'d like the configuration to be global (for all projects). Specific projects can override the global configuration.` `'
complete -c jf -n '__fish_seen_subcommand_from npm-config npmc' -f -l repo-deploy -r -d '[Optional] Repository for artifacts deployment.` `'
complete -c jf -n '__fish_seen_subcommand_from npm-config npmc' -f -l repo-resolve -r -d '[Optional] Repository for dependencies resolution.` `'
complete -c jf -n '__fish_seen_subcommand_from npm-config npmc' -f -l server-id-deploy -r -d '[Optional] Artifactory server ID for deployment. The server should configured using the \'jfrog c add\' command.` `'
complete -c jf -n '__fish_seen_subcommand_from npm-config npmc' -f -l server-id-resolve -r -d '[Optional] Artifactory server ID for resolution. The server should configured using the \'jfrog c add\' command.` `'
complete -c jf -n '__fish_seen_subcommand_from nuget' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_jf_no_subcommand' -a 'nuget' -d 'Run NuGet.'
complete -c jf -n '__fish_seen_subcommand_from nuget' -f -l build-name -r -d '[Optional] Providing this option will collect and record build info for this build name. Build number option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from nuget' -f -l build-number -r -d '[Optional] Providing this option will collect and record build info for this build number. Build name option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from nuget' -f -l module -r -d '[Optional] Optional module name for the build-info. Build name and number options are mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from nuget' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from nuget-config nugetc' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_jf_no_subcommand' -a 'nuget-config nugetc' -d 'Generate nuget configuration.'
complete -c jf -n '__fish_seen_subcommand_from nuget-config nugetc' -f -l global -d '[Default: false] Set to true if you\'d like the configuration to be global (for all projects). Specific projects can override the global configuration.` `'
complete -c jf -n '__fish_seen_subcommand_from nuget-config nugetc' -f -l nuget-v2 -d '[Default: false] Set to true if you\'d like to use the NuGet V2 protocol when restoring packages from Artifactory.` `'
complete -c jf -n '__fish_seen_subcommand_from nuget-config nugetc' -f -l repo-resolve -r -d '[Optional] Repository for dependencies resolution.` `'
complete -c jf -n '__fish_seen_subcommand_from nuget-config nugetc' -f -l server-id-resolve -r -d '[Optional] Artifactory server ID for resolution. The server should configured using the \'jfrog c add\' command.` `'
complete -c jf -n '__fish_seen_subcommand_from pip' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_jf_no_subcommand' -a 'pip' -d 'Run pip install.'
complete -c jf -n '__fish_seen_subcommand_from pip' -f -l build-name -r -d '[Optional] Providing this option will collect and record build info for this build name. Build number option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from pip' -f -l build-number -r -d '[Optional] Providing this option will collect and record build info for this build number. Build name option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from pip' -f -l module -r -d '[Optional] Optional module name for the build-info. Build name and number options are mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from pip' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from pip-config pipc' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_jf_no_subcommand' -a 'pip-config pipc' -d 'Generate pip build configuration.'
complete -c jf -n '__fish_seen_subcommand_from pip-config pipc' -f -l global -d '[Default: false] Set to true if you\'d like the configuration to be global (for all projects). Specific projects can override the global configuration.` `'
complete -c jf -n '__fish_seen_subcommand_from pip-config pipc' -f -l repo-resolve -r -d '[Optional] Repository for dependencies resolution.` `'
complete -c jf -n '__fish_seen_subcommand_from pip-config pipc' -f -l server-id-resolve -r -d '[Optional] Artifactory server ID for resolution. The server should configured using the \'jfrog c add\' command.` `'
complete -c jf -n '__fish_seen_subcommand_from pipenv' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_jf_no_subcommand' -a 'pipenv' -d 'Run pipenv install.'
complete -c jf -n '__fish_seen_subcommand_from pipenv' -f -l build-name -r -d '[Optional] Providing this option will collect and record build info for this build name. Build number option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from pipenv' -f -l build-number -r -d '[Optional] Providing this option will collect and record build info for this build number. Build name option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from pipenv' -f -l module -r -d '[Optional] Optional module name for the build-info. Build name and number options are mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from pipenv' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from pipenv-config pipec' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_jf_no_subcommand' -a 'pipenv-config pipec' -d 'Generate pipenv build configuration.'
complete -c jf -n '__fish_seen_subcommand_from pipenv-config pipec' -f -l global -d '[Default: false] Set to true if you\'d like the configuration to be global (for all projects). Specific projects can override the global configuration.` `'
complete -c jf -n '__fish_seen_subcommand_from pipenv-config pipec' -f -l repo-resolve -r -d '[Optional] Repository for dependencies resolution.` `'
complete -c jf -n '__fish_seen_subcommand_from pipenv-config pipec' -f -l server-id-resolve -r -d '[Optional] Artifactory server ID for resolution. The server should configured using the \'jfrog c add\' command.` `'
complete -c jf -n '__fish_seen_subcommand_from poetry' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_jf_no_subcommand' -a 'poetry' -d 'Run poetry command'
complete -c jf -n '__fish_seen_subcommand_from poetry' -f -l build-name -r -d '[Optional] Providing this option will collect and record build info for this build name. Build number option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from poetry' -f -l build-number -r -d '[Optional] Providing this option will collect and record build info for this build number. Build name option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from poetry' -f -l module -r -d '[Optional] Optional module name for the build-info. Build name and number options are mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from poetry' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from poetry-config poc' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_jf_no_subcommand' -a 'poetry-config poc' -d 'Generate poetry build configuration.'
complete -c jf -n '__fish_seen_subcommand_from poetry-config poc' -f -l global -d '[Default: false] Set to true if you\'d like the configuration to be global (for all projects). Specific projects can override the global configuration.` `'
complete -c jf -n '__fish_seen_subcommand_from poetry-config poc' -f -l repo-resolve -r -d '[Optional] Repository for dependencies resolution.` `'
complete -c jf -n '__fish_seen_subcommand_from poetry-config poc' -f -l server-id-resolve -r -d '[Optional] Artifactory server ID for resolution. The server should configured using the \'jfrog c add\' command.` `'
complete -c jf -n '__fish_seen_subcommand_from terraform tf' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_jf_no_subcommand' -a 'terraform tf' -d 'Runs terraform '
complete -c jf -n '__fish_seen_subcommand_from terraform tf' -f -l access-token -r -d '[Optional] JFrog access token.` `'
complete -c jf -n '__fish_seen_subcommand_from terraform tf' -f -l password -r -d '[Optional] JFrog password.` `'
complete -c jf -n '__fish_seen_subcommand_from terraform tf' -f -l url -r -d '[Optional] JFrog Artifactory URL.` `'
complete -c jf -n '__fish_seen_subcommand_from terraform tf' -f -l user -r -d '[Optional] JFrog username.` `'
complete -c jf -n '__fish_seen_subcommand_from terraform-config tfc' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_jf_no_subcommand' -a 'terraform-config tfc' -d 'Generate terraform configuration.'
complete -c jf -n '__fish_seen_subcommand_from terraform-config tfc' -f -l global -d '[Default: false] Set to true if you\'d like the configuration to be global (for all projects). Specific projects can override the global configuration.` `'
complete -c jf -n '__fish_seen_subcommand_from terraform-config tfc' -f -l repo-deploy -r -d '[Optional] Repository for artifacts deployment.` `'
complete -c jf -n '__fish_seen_subcommand_from terraform-config tfc' -f -l server-id-deploy -r -d '[Optional] Artifactory server ID for deployment. The server should configured using the \'jfrog c add\' command.` `'
complete -c jf -n '__fish_seen_subcommand_from yarn' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_jf_no_subcommand' -a 'yarn' -d 'Run Yarn commands.'
complete -c jf -n '__fish_seen_subcommand_from yarn' -f -l build-name -r -d '[Optional] Providing this option will collect and record build info for this build name. Build number option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from yarn' -f -l build-number -r -d '[Optional] Providing this option will collect and record build info for this build number. Build name option is mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from yarn' -f -l module -r -d '[Optional] Optional module name for the build-info. Build name and number options are mandatory when this option is provided.` `'
complete -c jf -n '__fish_seen_subcommand_from yarn' -f -l project -r -d '[Optional] Artifactory project key.` `'
complete -c jf -n '__fish_seen_subcommand_from yarn-config yarnc' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_jf_no_subcommand' -a 'yarn-config yarnc' -d 'Generate Yarn configuration.'
complete -c jf -n '__fish_seen_subcommand_from yarn-config yarnc' -f -l global -d '[Default: false] Set to true if you\'d like the configuration to be global (for all projects). Specific projects can override the global configuration.` `'
complete -c jf -n '__fish_seen_subcommand_from yarn-config yarnc' -f -l repo-resolve -r -d '[Optional] Repository for dependencies resolution.` `'
complete -c jf -n '__fish_seen_subcommand_from yarn-config yarnc' -f -l server-id-resolve -r -d '[Optional] Artifactory server ID for resolution. The server should configured using the \'jfrog c add\' command.` `'
complete -c jf -n '__fish_seen_subcommand_from help h' -f -l help -s h -d 'show help'
complete -r -c jf -n '__fish_jf_no_subcommand' -a 'help h' -d 'Shows a list of commands or help for one command'
