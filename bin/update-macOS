#!/usr/bin/env bash

set -o errexit
set -o nounset

print_heading(){
  local -r blue=$(tput setaf 4)
  local -r green=$(tput setaf 2)
  local -r normal=$(tput sgr0)
  local -r heading=$1
  local -r surround="${blue}########################${normal}"
  printf "%s %s %s\n" "$surround" "${green}${heading}${normal}" "$surround"
}
brew_upgrade(){
  if hash brew &>/dev/null; then
    brew update
    brew upgrade
    brew autoremove
    # remove downloads older than 2 months
    brew cleanup --prune=60
  else
    echo "Homebrew does not seem to be installed on this system."
    echo "Not upgrading Homebrew packages."
  fi
}
brew_upgrade_cask(){
  if hash brew &>/dev/null; then
    brew update
    brew upgrade --cask --greedy
    # remove downloads older than 2 months
    brew cleanup --prune=60
  else
    echo "Homebrew does not seem to be installed on this system."
    echo "Not upgrading Homebrew Cask packages."
  fi
}
app_store_update(){
  if hash mas &>/dev/null; then
    mas list
    mas upgrade
  else
    echo "The 'mas' command is not installed on this system."
    echo "Not updating App Store packages."
  fi
}
fish_update(){

  if hash fish &>/dev/null; then
    fish --command="fisher update"
  else
    echo "Fish Shell does not seem to be installed on this system."
    echo "Not updating fisher packages."
  fi
}
vim_update(){
  if hash vim &>/dev/null; then
    vim +PlugUpgrade +qall
    printf "\n"
    vim +PlugUpdate +qall
    printf "\n"
    # TODO @alex figure out if there  is a better place/way to install taskwiki python dependencies (maybe done by vim-plug)
    # both python packages installed below are used by taskwiki
    pip3 install --upgrade pynvim
    # FIXME The use of a `pip3` might break in other OS's. Maybe we should try to handle this somehow and even default to pip?
    pip3 install --upgrade packaging
  else
    echo "Vim does not seem to be installed on this system."
    echo "Not updating Vim Plug packages for Vim."
  fi
}

neovim_update(){
  if hash nvim &>/dev/null; then
    nvim --headless "+Lazy! sync" +qa
  else
    echo "Neovim does not seem to be installed on this system."
    echo "Not updating lazy.nvim packages for Neovim."
  fi
}

tmux_update(){
  if hash tmux &>/dev/null; then
    if [ -f ~/.tmux/plugins/tpm/bin/update_plugins ]; then 
      ~/.tmux/plugins/tpm/bin/update_plugins all
    else
      echo "The 'update_plugins' command is not installed on this system."
      echo "Not updating Tmux plugins with TPM."
    fi
  else
    echo "Tmux is not installed on this system."
    echo "Not updating Tmux plugins."
  fi
}

coursier_update(){
  if hash cs &>/dev/null; then
    cs update
  else
    echo "Coursier is not installed on this system."
    echo "Not updating Coursier packages."
  fi
}

pipx_update(){
  if hash pipx &>/dev/null; then
    pipx upgrade-all
  else
    echo "The 'pipx' command is not installed on this system."
    echo "Not updating Pipx Python Apps."
  fi
}
main(){
  print_heading "Homebrew - Upgrade"
  brew_upgrade

  print_heading "Homebrew - Upgrade Cask"
  brew_upgrade_cask

  print_heading "Pipx - Update"
  pipx_update

  print_heading "App Store - Update"
  app_store_update

  print_heading "Fish Shell - Fisher Plugin Manager - Update"
  fish_update

  print_heading "Vim - Vim Plug - Update"
  vim_update

  print_heading "Neovim - Lazy Vim - Update"
  neovim_update

  print_heading "Tmux - Tmux Plugin Manager (aka TMP) - Update"
  tmux_update

  print_heading "Coursier - Update"
  coursier_update

  print_heading "All updates terminated successfully"
}

main "$@"
